<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Python on adventures in optimization</title>
    <link>https://ryanjoneil.github.io/tags/python/</link>
    <description>Recent content in Python on adventures in optimization</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Fri, 25 Nov 2011 00:00:00 +0000</lastBuildDate><atom:link href="https://ryanjoneil.github.io/tags/python/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>⏳️ Know Your Time Complexities - Part 2</title>
      <link>https://ryanjoneil.github.io/posts/2011-11-25-know-your-time-complexities-part-2/</link>
      <pubDate>Fri, 25 Nov 2011 00:00:00 +0000</pubDate>
      
      <guid>https://ryanjoneil.github.io/posts/2011-11-25-know-your-time-complexities-part-2/</guid>
      <description>More on the importance of time complexity in basic programming</description>
      <content:encoded><![CDATA[<p>In response to <a href="../2011-10-25-know-your-time-complexities/">this</a> post, <a href="https://en.wikipedia.org/wiki/Structure_and_Interpretation_of_Computer_Programs">Ben Bitdiddle</a> inquires:</p>
<blockquote>
<p>I understand the concept of using a companion set to remove duplicates from a list while preserving the order of its elements. But what should I do if these elements are composed of smaller pieces? For instance, say I am generating <a href="https://en.wikipedia.org/wiki/Combination">combinations</a> of numbers in which order is unimportant. How do I make a set recognize that <code>[1,2,3]</code> is the same as <code>[3,2,1]</code> in this case?</p>
</blockquote>
<p>There are a couple points that should help here.</p>
<p>While lists are unhashable and therefore cannot be put into sets, tuples are perfectly capable of this. Therefore I cannot do this.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>s <span style="color:#f92672">=</span> set()
</span></span><span style="display:flex;"><span>s<span style="color:#f92672">.</span>add([<span style="color:#ae81ff">1</span>,<span style="color:#ae81ff">2</span>,<span style="color:#ae81ff">3</span>])
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-txt" data-lang="txt"><span style="display:flex;"><span>Traceback (most recent call last):
</span></span><span style="display:flex;"><span> File &#34;&lt;stdin&gt;&#34;, line 1, in &lt;module&gt;
</span></span><span style="display:flex;"><span>TypeError: unhashable type: &#39;list&#39;
</span></span></code></pre></div><p>But this works just fine <em>(extra space added for emphasis of tuple parentheses)</em>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>s<span style="color:#f92672">.</span>add( (<span style="color:#ae81ff">1</span>,<span style="color:#ae81ff">2</span>,<span style="color:#ae81ff">3</span>) )
</span></span></code></pre></div><p><code>(3,2,1)</code> and <code>(1,2,3)</code> may not hash to the same thing, but tuples are easily sortable. If I sort them before adding them to a set, they look the same.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>tuple(sorted( (<span style="color:#ae81ff">3</span>,<span style="color:#ae81ff">2</span>,<span style="color:#ae81ff">1</span>) ))
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>(<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">3</span>)
</span></span></code></pre></div><p>If I want to be a little fancier, I can user <a href="https://docs.python.org/3/library/itertools.html#itertools.combinations"><code>itertools.combinations</code></a>. The following generates all unique 3-digit combinations of integers from 1 to 4:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">from</span> itertools <span style="color:#f92672">import</span> combinations
</span></span><span style="display:flex;"><span>list(combinations(range(<span style="color:#ae81ff">1</span>,<span style="color:#ae81ff">5</span>), <span style="color:#ae81ff">3</span>))
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>[(<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">3</span>), (<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">4</span>), (<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">3</span>, <span style="color:#ae81ff">4</span>), (<span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">3</span>, <span style="color:#ae81ff">4</span>)]
</span></span></code></pre></div><p>Now say I want to only find those that match some condition. I can add a filter to return, say, only those 3-digit combinations of integers from 1 to 6 that multiply to a number divisible by 10:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>list(filter(
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">lambda</span> x: <span style="color:#f92672">not</span> (x[<span style="color:#ae81ff">0</span>]<span style="color:#f92672">*</span>x[<span style="color:#ae81ff">1</span>]<span style="color:#f92672">*</span>x[<span style="color:#ae81ff">2</span>]) <span style="color:#f92672">%</span> <span style="color:#ae81ff">10</span>,
</span></span><span style="display:flex;"><span>    combinations(range(<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">7</span>), <span style="color:#ae81ff">3</span>)
</span></span><span style="display:flex;"><span>))
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>[(<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">5</span>),
</span></span><span style="display:flex;"><span> (<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">4</span>, <span style="color:#ae81ff">5</span>),
</span></span><span style="display:flex;"><span> (<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">5</span>, <span style="color:#ae81ff">6</span>),
</span></span><span style="display:flex;"><span> (<span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">3</span>, <span style="color:#ae81ff">5</span>),
</span></span><span style="display:flex;"><span> (<span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">4</span>, <span style="color:#ae81ff">5</span>),
</span></span><span style="display:flex;"><span> (<span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">5</span>, <span style="color:#ae81ff">6</span>),
</span></span><span style="display:flex;"><span> (<span style="color:#ae81ff">3</span>, <span style="color:#ae81ff">4</span>, <span style="color:#ae81ff">5</span>),
</span></span><span style="display:flex;"><span> (<span style="color:#ae81ff">3</span>, <span style="color:#ae81ff">5</span>, <span style="color:#ae81ff">6</span>),
</span></span><span style="display:flex;"><span> (<span style="color:#ae81ff">4</span>, <span style="color:#ae81ff">5</span>, <span style="color:#ae81ff">6</span>)]
</span></span></code></pre></div>]]></content:encoded>
    </item>
    
    <item>
      <title>⏳️ Know Your Time Complexities</title>
      <link>https://ryanjoneil.github.io/posts/2011-10-25-know-your-time-complexities/</link>
      <pubDate>Tue, 25 Oct 2011 00:00:00 +0000</pubDate>
      
      <guid>https://ryanjoneil.github.io/posts/2011-10-25-know-your-time-complexities/</guid>
      <description>The importance of time complexity in basic programming</description>
      <content:encoded><![CDATA[<p>This is based on a lightning talk I gave at the LA PyLadies October Hackathon.</p>
<p>I&rsquo;m actually not going to go into anything much resembling algorithmic complexity here. What I&rsquo;d like to do is present a common performance anti-pattern that I see from novice programmers about once every year or so. If I can prevent one person from committing this error, this post will have achieved its goal. I&rsquo;d also like to show how an intuitive understanding of time required by operations in relation to the size of data they operate on can be helpful.</p>
<p>Say you have a Big List of Things. It doesn&rsquo;t particularly matter what these things are. Often they might be objects or dictionaries of denormalized data. In this example we&rsquo;ll use numbers. Let&rsquo;s generate a list of 1 million integers, each randomly chosen from the first 100 thousand natural numbers:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> random
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>choices <span style="color:#f92672">=</span> range(<span style="color:#ae81ff">100000</span>)
</span></span><span style="display:flex;"><span>x <span style="color:#f92672">=</span> [random<span style="color:#f92672">.</span>choice(choices) <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">1000000</span>)]
</span></span></code></pre></div><p>Now say you want to remove (or aggregate, or structure) duplicate data while keeping them <em>in order of appearance</em>. Intuitively, this seems simple enough. A first solution might involve creating a new empty list, iterating over x, and only appending those items that are not already in the new list.</p>
<h2 id="the-bad-way">The Bad Way</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>order <span style="color:#f92672">=</span> []
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> x:
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> i <span style="color:#f92672">not</span> <span style="color:#f92672">in</span> order:
</span></span><span style="display:flex;"><span>        order<span style="color:#f92672">.</span>append(i)
</span></span></code></pre></div><p>Try running this. What&rsquo;s wrong with it?</p>
<p>The issue is the conditional on line 3. In the worst case, it could look at every item in the order list for each item in x. If the list is big, as it is in our example, that wastes a lot of cycles. We can reason that we can improve the performance of our code by replacing this conditional with something faster.</p>
<h2 id="the-good-way">The Good Way</h2>
<p>Given that sets have near constant time for membership tests, one solution is to create a companion data structure, which we&rsquo;ll call seen. Being a set, it doesn&rsquo;t care about the order of the items, but it will allow us to test for membership quickly.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>order <span style="color:#f92672">=</span> []
</span></span><span style="display:flex;"><span>seen <span style="color:#f92672">=</span> set()
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> x:
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> i <span style="color:#f92672">not</span> <span style="color:#f92672">in</span> seen:
</span></span><span style="display:flex;"><span>        seen<span style="color:#f92672">.</span>add(i)
</span></span><span style="display:flex;"><span>        order<span style="color:#f92672">.</span>append(i)
</span></span></code></pre></div><p>Now try running this. Better?</p>
<p>Not that this is the best way to perform this particular action. If you aren&rsquo;t familiar with it, take a look at the <a href="http://docs.python.org/library/itertools.html#itertools.groupby"><code>groupby</code></a> function from <code>itertools</code>, which is what I will sometimes reach for in a case like this.</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>🎰 Deterministic vs. Stochastic Simulation</title>
      <link>https://ryanjoneil.github.io/posts/2011-06-11-deterministic-vs-stochastic-simulation/</link>
      <pubDate>Sat, 11 Jun 2011 00:00:00 +0000</pubDate>
      
      <guid>https://ryanjoneil.github.io/posts/2011-06-11-deterministic-vs-stochastic-simulation/</guid>
      <description>The importance of randomness in simulations</description>
      <content:encoded><![CDATA[<p>I find I have to build simulations with increasing frequency in my work and life. Usually this indicates I&rsquo;m faced with one of the following situations:</p>
<ul>
<li>The need for a quick estimate regarding the quantitative behavior of some situation.</li>
<li>The desire to verify the result of a computation or assumption.</li>
<li>A situation which is too complex or random to effectively model or understand.</li>
</ul>
<p>Anyone familiar at all with simulation will recognize the last item as the motivating force of the entire field. Simulation models tend to take over when systems become so complex that understanding them is prohibitive in cost and time or entirely infeasible. In a simulation, the modeler can focus on individual interactions between entities while still hoping for useful output in the form of descriptive statistics.</p>
<p>As such, simulations are nearly always stochastic. The output of a simulation, whether it be the mean time to service upon entering a queue or the number of fish alive in a pond, is determined by a number of random inputs. It is estimated by looking at a sample of the entire, often infinite, problem space and therefore must be described in terms of mean and variance.</p>
<p>For me, simulation building usually follows a process roughly like this:</p>
<ul>
<li>Work with a domain expert to understand the process under study.</li>
<li>Convert this process into a deterministic simulation (no randomness).</li>
<li>Verify the output of the deterministic simulation.</li>
<li>Anlyze the inputs of the simulation to determine their probability distributions.</li>
<li>Convert the deterministic simulation to a stochastic simulation.</li>
</ul>
<p>The reason for creating a simulation without randomness first is that it can be difficult or impossible to verify its correctness otherwise. Thus one may focus on the simulation logic first before analyzing and adding sources of randomness.</p>
<p>Where the procedure breaks down is after the third step. Domain experts are often happy to share their knowledge about systems to aid in designing simulations, and typically can understand the resulting abstractions. They are also invaluable in verifying simulation output. However, they are unlikely to understand why it is necessary to add randomness to a system that they already perceive as functional. Further, doing so can be just as difficult and time consuming as the initial model development and therefore requires justification.</p>
<p>This can be a quandary for the model builder. How does one communicate the need to incorporate randomness to decision makers who lack understanding of probability? It is trivially easy to construct simulations that use the same input parameters but yield drastically different outputs. Consider the code below, which simulates two events occurring and counts the number of times event b happens before event a.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> random
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">sim_stochastic</span>(event_a_lambda, event_b_lambda):
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Returns 0 if event A arrives first, 1 if event B arrives first</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Calculate next arrival time for each event randomly.</span>
</span></span><span style="display:flex;"><span>    event_a_arrival <span style="color:#f92672">=</span> random<span style="color:#f92672">.</span>expovariate(event_a_lambda)
</span></span><span style="display:flex;"><span>    event_b_arrival <span style="color:#f92672">=</span> random<span style="color:#f92672">.</span>expovariate(event_b_lambda)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0.0</span> <span style="color:#66d9ef">if</span> event_a_arrival <span style="color:#f92672">&lt;=</span> event_b_arrival <span style="color:#66d9ef">else</span> <span style="color:#ae81ff">1.0</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">sim_deterministic</span>(event_a_lambda, event_b_lambda):
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Returns 0 if event A arrives first, 1 if event B arrives first</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Calculate next arrival time for each event deterministically.</span>
</span></span><span style="display:flex;"><span>    event_a_arrival <span style="color:#f92672">=</span> <span style="color:#ae81ff">1.0</span> <span style="color:#f92672">/</span> event_a_lambda
</span></span><span style="display:flex;"><span>    event_b_arrival <span style="color:#f92672">=</span> <span style="color:#ae81ff">1.0</span> <span style="color:#f92672">/</span> event_b_lambda
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0.0</span> <span style="color:#66d9ef">if</span> event_a_arrival <span style="color:#f92672">&lt;=</span> event_b_arrival <span style="color:#66d9ef">else</span> <span style="color:#ae81ff">1.0</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> __name__ <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;__main__&#39;</span>:
</span></span><span style="display:flex;"><span>    event_a_lambda <span style="color:#f92672">=</span> <span style="color:#ae81ff">0.3</span>
</span></span><span style="display:flex;"><span>    event_b_lambda <span style="color:#f92672">=</span> <span style="color:#ae81ff">0.5</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    repetitions <span style="color:#f92672">=</span> <span style="color:#ae81ff">10000</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> sim <span style="color:#f92672">in</span> (sim_stochastic, sim_deterministic):
</span></span><span style="display:flex;"><span>        output <span style="color:#f92672">=</span> [
</span></span><span style="display:flex;"><span>            sim(event_a_lambda, event_b_lambda)
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">for</span> _ <span style="color:#f92672">in</span> range(repetitions)
</span></span><span style="display:flex;"><span>        ]
</span></span><span style="display:flex;"><span>        event_b_first <span style="color:#f92672">=</span> <span style="color:#ae81ff">100.0</span> <span style="color:#f92672">*</span> (sum(output) <span style="color:#f92672">/</span> len(output))
</span></span><span style="display:flex;"><span>        print(<span style="color:#e6db74">&#39;event b is first </span><span style="color:#e6db74">%0.1f%%</span><span style="color:#e6db74"> of the time&#39;</span> <span style="color:#f92672">%</span> event_b_first)
</span></span></code></pre></div><p>Both simulations use the same input parameter, but the second one is essentially wrong as b will always happen first. In the stochastic version, we use exponential distributions for the inputs and obtain an output that verifies our basic understanding of these distributions.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-txt" data-lang="txt"><span style="display:flex;"><span>event b is first 63.0% of the time
</span></span><span style="display:flex;"><span>event b is first 100.0% of the time
</span></span></code></pre></div><p>How about you? How do you discuss the need to model a random world with decision makers?</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>🔮 NetworkX and Python Futures</title>
      <link>https://ryanjoneil.github.io/posts/2011-05-19-networkx-and-python-futures/</link>
      <pubDate>Thu, 19 May 2011 00:00:00 +0000</pubDate>
      
      <guid>https://ryanjoneil.github.io/posts/2011-05-19-networkx-and-python-futures/</guid>
      <description>Solve graph problems on multiple cores NetworkX and Python futures</description>
      <content:encoded><![CDATA[<p><em>Note: This post was updated to work with <a href="https://networkx.org/">NetworkX</a> and for clarity.</em></p>
<p>It&rsquo;s possible this will turn out like the day when Python 2.5 introduced [coroutines][coroutines]. At the time I was very excited. I spent several hours trying to convince my coworkers we should immediately abandon all our existing Java infrastructure and port it to finite state machines implemented using Python coroutines. After a day of hand waving over a proof of concept, we put that idea aside and went about our lives.</p>
<p>Soon after, I left for a Python shop, but in the next half decade I still never found a good place to use this interesting feature.</p>
<p>But it doesn&rsquo;t feel like that.</p>
<p>As I come to terms more with switching to Python 3.2, the <a href="https://docs.python.org/py3k/library/concurrent.futures.html">futures</a> module seems similarly exciting. I wish I&rsquo;d had it years ago, and it&rsquo;s almost reason in itself to upgrade from Python 2.7. <em>Who cares if none of your libraries have been ported yet?</em></p>
<p>This library lets you take any function and distribute it over a process pool. To test that out, we&rsquo;ll generate a bunch of random graphs and iterate over all their <a href="https://en.wikipedia.org/wiki/Clique_(graph_theory)">cliques</a>.</p>
<h2 id="code">Code</h2>
<p>First, let&rsquo;s generate some test data using the <a href="https://networkx.org/documentation/stable/reference/generated/networkx.generators.random_graphs.gnm_random_graph.html"><code>dense_gnm_random_graph</code></a> function. Our data includes 1000 random graphs, each with 100 nodes and 100 * 100 edges.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> networkx <span style="color:#66d9ef">as</span> nx
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>n <span style="color:#f92672">=</span> <span style="color:#ae81ff">100</span>
</span></span><span style="display:flex;"><span>graphs <span style="color:#f92672">=</span> [nx<span style="color:#f92672">.</span>dense_gnm_random_graph(n, n<span style="color:#f92672">*</span>n) <span style="color:#66d9ef">for</span> _ <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">1000</span>)]
</span></span></code></pre></div><p>Now we write a function iterate over all cliques in a given graph. NetworkX provides a <code>find_cliques</code> function which returns a generator. Iterating over them ensures we will run through the entire process of finding all cliques for a graph.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">iterate_cliques</span>(g):
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> _ <span style="color:#f92672">in</span> nx<span style="color:#f92672">.</span>find_cliques(g):
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">pass</span>
</span></span></code></pre></div><p>Now we just define two functions, one for running in serial and one for running in parallel using <code>futures</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">from</span> concurrent <span style="color:#f92672">import</span> futures
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">serial_test</span>(graphs):
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> g <span style="color:#f92672">in</span> graphs:
</span></span><span style="display:flex;"><span>        iterate_cliques(g)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">parallel_test</span>(graphs, max_workers):
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">with</span> futures<span style="color:#f92672">.</span>ProcessPoolExecutor(max_workers<span style="color:#f92672">=</span>max_workers) <span style="color:#66d9ef">as</span> executor:
</span></span><span style="display:flex;"><span>        executor<span style="color:#f92672">.</span>map(iterate_cliques, graphs)
</span></span></code></pre></div><p>Our <code>__main__</code> simply generates the random graphs, samples from them, times both functions, and write CSV data to standard output.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">from</span> csv <span style="color:#f92672">import</span> writer
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> random
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> sys
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> time
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> __name__ <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;__main__&#39;</span>:
</span></span><span style="display:flex;"><span>    out <span style="color:#f92672">=</span> writer(sys<span style="color:#f92672">.</span>stdout)
</span></span><span style="display:flex;"><span>    out<span style="color:#f92672">.</span>writerow([<span style="color:#e6db74">&#39;num graphs&#39;</span>, <span style="color:#e6db74">&#39;serial time&#39;</span>, <span style="color:#e6db74">&#39;parallel time&#39;</span>])
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    n <span style="color:#f92672">=</span> <span style="color:#ae81ff">100</span>
</span></span><span style="display:flex;"><span>    graphs <span style="color:#f92672">=</span> [nx<span style="color:#f92672">.</span>dense_gnm_random_graph(n, n<span style="color:#f92672">*</span>n) <span style="color:#66d9ef">for</span> _ <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">1000</span>)]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Run with a number of different randomly generated graphs</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> num_graphs <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">50</span>, <span style="color:#ae81ff">1001</span>, <span style="color:#ae81ff">50</span>):
</span></span><span style="display:flex;"><span>        sample <span style="color:#f92672">=</span> random<span style="color:#f92672">.</span>choices(graphs, k <span style="color:#f92672">=</span> num_graphs)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        start <span style="color:#f92672">=</span> time<span style="color:#f92672">.</span>time()
</span></span><span style="display:flex;"><span>        serial_test(sample)
</span></span><span style="display:flex;"><span>        serial_time <span style="color:#f92672">=</span> time<span style="color:#f92672">.</span>time() <span style="color:#f92672">-</span> start
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        start <span style="color:#f92672">=</span> time<span style="color:#f92672">.</span>time()
</span></span><span style="display:flex;"><span>        parallel_test(sample, <span style="color:#ae81ff">16</span>)
</span></span><span style="display:flex;"><span>        parallel_time <span style="color:#f92672">=</span> time<span style="color:#f92672">.</span>time() <span style="color:#f92672">-</span> start
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        out<span style="color:#f92672">.</span>writerow([num_graphs, serial_time, parallel_time])
</span></span></code></pre></div><p>The output of this script shows that we get a fairly linear speedup to this code with little effort.</p>
<p><img loading="lazy" src="/files/2011-05-19-networkx-and-python-futures/speedup.png" alt="Speedup"  />
</p>
<p>I ran this on a machine with 8 cores and hyperthreading. Eyeballing the chart, it looks like the speedup is roughly 5x. My system monitor shows spikes on CPU usage across cores whenever the parallel test runs.</p>
<p><img loading="lazy" src="/files/2011-05-19-networkx-and-python-futures/cpu.png" alt="CPU usage"  />
</p>
<h2 id="resources">Resources</h2>
<ul>
<li>Output <a href="/files/2011-05-19-networkx-and-python-futures/data.csv">data</a></li>
<li>Full <a href="/files/2011-05-19-networkx-and-python-futures/iterate-cliques.py">source listing</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>🐪 Reformed JAPHs: Transpiler</title>
      <link>https://ryanjoneil.github.io/posts/2011-04-18-reformed-japhs-transpiler/</link>
      <pubDate>Wed, 20 Apr 2011 00:00:00 +0000</pubDate>
      
      <guid>https://ryanjoneil.github.io/posts/2011-04-18-reformed-japhs-transpiler/</guid>
      <description>Scheme to Python transpiler</description>
      <content:encoded><![CDATA[<p><em>Note: This post was edited for clarity.</em></p>
<p>For the final JAPH in this series, I implemented a simple transpiler that converts a small subset of <a href="https://www.scheme.org/">Scheme</a> programs to equivalent Python programs. It starts with a Scheme program that prints <code>'just another scheme hacker'</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-scheme" data-lang="scheme"><span style="display:flex;"><span>(<span style="color:#66d9ef">define </span>(<span style="color:#a6e22e">output</span> x)
</span></span><span style="display:flex;"><span>    (<span style="color:#66d9ef">if </span>(null? x)
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;&#34;</span>
</span></span><span style="display:flex;"><span>        (<span style="color:#66d9ef">begin </span>(display (car x))
</span></span><span style="display:flex;"><span>                (<span style="color:#66d9ef">if </span>(null? (cdr x))
</span></span><span style="display:flex;"><span>                    (display <span style="color:#e6db74">&#34;\n&#34;</span>)
</span></span><span style="display:flex;"><span>                    (<span style="color:#66d9ef">begin </span>(display <span style="color:#e6db74">&#34; &#34;</span>)
</span></span><span style="display:flex;"><span>                            (<span style="color:#a6e22e">output</span> (cdr x)))))))
</span></span><span style="display:flex;"><span>(<span style="color:#a6e22e">output</span> (list <span style="color:#e6db74">&#34;just&#34;</span> <span style="color:#e6db74">&#34;another&#34;</span> <span style="color:#e6db74">&#34;scheme&#34;</span> <span style="color:#e6db74">&#34;hacker&#34;</span>))
</span></span></code></pre></div><p>The program then tokenizes that Scheme source, parses the token stream, and converts that into Python 3.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">output</span>(x):
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> <span style="color:#f92672">not</span> x:
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">else</span>:
</span></span><span style="display:flex;"><span>        print(x[<span style="color:#ae81ff">0</span>], end<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;&#39;</span>)
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> <span style="color:#f92672">not</span> x[<span style="color:#ae81ff">1</span>:]:
</span></span><span style="display:flex;"><span>            print(<span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>, end<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;&#39;</span>)
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">else</span>:
</span></span><span style="display:flex;"><span>            print(<span style="color:#e6db74">&#34; &#34;</span>, end<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;&#39;</span>)
</span></span><span style="display:flex;"><span>            output(x[<span style="color:#ae81ff">1</span>:])
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>output([<span style="color:#e6db74">&#34;just&#34;</span>, <span style="color:#e6db74">&#34;another&#34;</span>, <span style="color:#e6db74">&#34;python&#34;</span>, <span style="color:#e6db74">&#34;hacker&#34;</span>])
</span></span></code></pre></div><p>Finally it executes the resulting Python string using <code>exec</code>. Obfuscation is left as an exercise for the reader.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> re
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">tokenize</span>(input):
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#39;&#39;&#39;Tokenizes an input stream into a list of recognizable tokens&#39;&#39;&#39;</span>
</span></span><span style="display:flex;"><span>    token_res <span style="color:#f92672">=</span> (
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">r</span><span style="color:#e6db74">&#39;\(&#39;</span>,      <span style="color:#75715e"># open paren -&gt; starts expression</span>
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">r</span><span style="color:#e6db74">&#39;\)&#39;</span>,      <span style="color:#75715e"># close paren -&gt; ends expression</span>
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">r</span><span style="color:#e6db74">&#39;&#34;[^&#34;]*&#34;&#39;</span>, <span style="color:#75715e"># quoted string (don&#39;t support \&#34; yet)</span>
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">r</span><span style="color:#e6db74">&#39;[\w?]+&#39;</span>   <span style="color:#75715e"># atom</span>
</span></span><span style="display:flex;"><span>    )
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> re<span style="color:#f92672">.</span>findall(<span style="color:#e6db74">r</span><span style="color:#e6db74">&#39;(&#39;</span> <span style="color:#f92672">+</span> <span style="color:#e6db74">&#39;|&#39;</span><span style="color:#f92672">.</span>join(token_res) <span style="color:#f92672">+</span> <span style="color:#e6db74">&#39;)&#39;</span>, input)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">parse</span>(stream):
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#39;&#39;&#39;Parses a token stream into a syntax tree&#39;&#39;&#39;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> <span style="color:#f92672">not</span> stream:
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> []
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">else</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># Build a list of arguments (possibly expressions) at this level</span>
</span></span><span style="display:flex;"><span>        args <span style="color:#f92672">=</span> []
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">while</span> <span style="color:#66d9ef">True</span>:
</span></span><span style="display:flex;"><span>            <span style="color:#75715e"># Get the next token</span>
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">try</span>:
</span></span><span style="display:flex;"><span>                x <span style="color:#f92672">=</span> stream<span style="color:#f92672">.</span>pop(<span style="color:#ae81ff">0</span>)
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">except</span> <span style="color:#a6e22e">IndexError</span>:
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">return</span> args
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>            <span style="color:#75715e"># ( and ) control the level of the tree we&#39;re at</span>
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">if</span> x <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;(&#39;</span>:
</span></span><span style="display:flex;"><span>                args<span style="color:#f92672">.</span>append(parse(stream))
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">elif</span> x <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;)&#39;</span>:
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">return</span> args
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">else</span>:
</span></span><span style="display:flex;"><span>                args<span style="color:#f92672">.</span>append(x)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">compile</span>(tree):
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#39;&#39;&#39;Compiles an Scheme Abstract Syntax Tree into near-Python&#39;&#39;&#39;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">compile_expr</span>(indent, expr):
</span></span><span style="display:flex;"><span>        indent <span style="color:#f92672">+=</span> <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        lines <span style="color:#f92672">=</span> [] <span style="color:#75715e"># these will have [(indent, statement), ...] structure</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">while</span> expr:
</span></span><span style="display:flex;"><span>            <span style="color:#75715e"># Two options: expr is a string like &#34;&#39;&#34; or it is a list</span>
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">if</span> isinstance(expr, str):
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">return</span> [(
</span></span><span style="display:flex;"><span>                    indent,
</span></span><span style="display:flex;"><span>                    expr<span style="color:#f92672">.</span>replace(<span style="color:#e6db74">&#39;scheme&#39;</span>, <span style="color:#e6db74">&#39;python&#39;</span>)<span style="color:#f92672">.</span>replace(<span style="color:#e6db74">&#39;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#39;</span>, <span style="color:#e6db74">&#39;</span><span style="color:#ae81ff">\\</span><span style="color:#e6db74">n&#39;</span>)
</span></span><span style="display:flex;"><span>                )]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">else</span>:
</span></span><span style="display:flex;"><span>                start <span style="color:#f92672">=</span> expr<span style="color:#f92672">.</span>pop(<span style="color:#ae81ff">0</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">if</span> start <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;define&#39;</span>:
</span></span><span style="display:flex;"><span>                    signature <span style="color:#f92672">=</span> expr<span style="color:#f92672">.</span>pop(<span style="color:#ae81ff">0</span>)
</span></span><span style="display:flex;"><span>                    lines<span style="color:#f92672">.</span>append((indent,
</span></span><span style="display:flex;"><span>                        <span style="color:#e6db74">&#39;def </span><span style="color:#e6db74">%s</span><span style="color:#e6db74">(</span><span style="color:#e6db74">%s</span><span style="color:#e6db74">):&#39;</span> <span style="color:#f92672">%</span> (
</span></span><span style="display:flex;"><span>                            signature[<span style="color:#ae81ff">0</span>],
</span></span><span style="display:flex;"><span>                            <span style="color:#e6db74">&#39;, &#39;</span><span style="color:#f92672">.</span>join(signature[<span style="color:#ae81ff">1</span>:])
</span></span><span style="display:flex;"><span>                        )
</span></span><span style="display:flex;"><span>                    ))
</span></span><span style="display:flex;"><span>                    <span style="color:#66d9ef">while</span> expr:
</span></span><span style="display:flex;"><span>                        lines<span style="color:#f92672">.</span>extend(compile_expr(indent, expr<span style="color:#f92672">.</span>pop(<span style="color:#ae81ff">0</span>)))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">elif</span> start <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;if&#39;</span>:
</span></span><span style="display:flex;"><span>                    <span style="color:#75715e"># We don&#39;t support multi-clause conditionals yet</span>
</span></span><span style="display:flex;"><span>                    clause <span style="color:#f92672">=</span> compile_expr(indent, expr<span style="color:#f92672">.</span>pop(<span style="color:#ae81ff">0</span>))[<span style="color:#ae81ff">0</span>][<span style="color:#ae81ff">1</span>]
</span></span><span style="display:flex;"><span>                    lines<span style="color:#f92672">.</span>append((indent, <span style="color:#e6db74">&#39;if </span><span style="color:#e6db74">%s</span><span style="color:#e6db74">:&#39;</span> <span style="color:#f92672">%</span> clause))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>                    if_true_lines <span style="color:#f92672">=</span> compile_expr(indent, expr<span style="color:#f92672">.</span>pop(<span style="color:#ae81ff">0</span>))
</span></span><span style="display:flex;"><span>                    if_false_lines <span style="color:#f92672">=</span> compile_expr(indent, expr<span style="color:#f92672">.</span>pop(<span style="color:#ae81ff">0</span>))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>                    lines<span style="color:#f92672">.</span>extend(if_true_lines)
</span></span><span style="display:flex;"><span>                    lines<span style="color:#f92672">.</span>append((indent, <span style="color:#e6db74">&#39;else:&#39;</span>))
</span></span><span style="display:flex;"><span>                    lines<span style="color:#f92672">.</span>extend(if_false_lines)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">elif</span> start <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;null?&#39;</span>:
</span></span><span style="display:flex;"><span>                    <span style="color:#75715e"># Only supports conditionals of the form (null? foo)</span>
</span></span><span style="display:flex;"><span>                    <span style="color:#66d9ef">if</span> isinstance(expr[<span style="color:#ae81ff">0</span>], str):
</span></span><span style="display:flex;"><span>                        condition <span style="color:#f92672">=</span> expr<span style="color:#f92672">.</span>pop(<span style="color:#ae81ff">0</span>)
</span></span><span style="display:flex;"><span>                    <span style="color:#66d9ef">else</span>:
</span></span><span style="display:flex;"><span>                        condition <span style="color:#f92672">=</span> compile_expr(indent, expr<span style="color:#f92672">.</span>pop(<span style="color:#ae81ff">0</span>))[<span style="color:#ae81ff">0</span>][<span style="color:#ae81ff">1</span>]
</span></span><span style="display:flex;"><span>                    <span style="color:#66d9ef">return</span> [(indent, <span style="color:#e6db74">&#39;not </span><span style="color:#e6db74">%s</span><span style="color:#e6db74">&#39;</span> <span style="color:#f92672">%</span> condition)]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">elif</span> start <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;begin&#39;</span>:
</span></span><span style="display:flex;"><span>                    <span style="color:#75715e"># This is just a series of statements, so don&#39;t indent</span>
</span></span><span style="display:flex;"><span>                    <span style="color:#66d9ef">while</span> expr:
</span></span><span style="display:flex;"><span>                        lines<span style="color:#f92672">.</span>extend(compile_expr(indent<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>, expr<span style="color:#f92672">.</span>pop(<span style="color:#ae81ff">0</span>)))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">elif</span> start <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;display&#39;</span>:
</span></span><span style="display:flex;"><span>                    arguments <span style="color:#f92672">=</span> []
</span></span><span style="display:flex;"><span>                    <span style="color:#66d9ef">while</span> expr:
</span></span><span style="display:flex;"><span>                        arguments<span style="color:#f92672">.</span>append(
</span></span><span style="display:flex;"><span>                            compile_expr(indent, expr<span style="color:#f92672">.</span>pop(<span style="color:#ae81ff">0</span>))[<span style="color:#ae81ff">0</span>][<span style="color:#ae81ff">1</span>]
</span></span><span style="display:flex;"><span>                        )
</span></span><span style="display:flex;"><span>                    lines<span style="color:#f92672">.</span>append((
</span></span><span style="display:flex;"><span>                        indent,
</span></span><span style="display:flex;"><span>                        <span style="color:#e6db74">&#34;print(</span><span style="color:#e6db74">%s</span><span style="color:#e6db74">, end=&#39;&#39;)&#34;</span> <span style="color:#f92672">%</span> (<span style="color:#e6db74">&#39;, &#39;</span><span style="color:#f92672">.</span>join(arguments))
</span></span><span style="display:flex;"><span>                    ))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">elif</span> start <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;car&#39;</span>:
</span></span><span style="display:flex;"><span>                    lines<span style="color:#f92672">.</span>append((indent, <span style="color:#e6db74">&#39;</span><span style="color:#e6db74">%s</span><span style="color:#e6db74">[0]&#39;</span> <span style="color:#f92672">%</span> expr<span style="color:#f92672">.</span>pop(<span style="color:#ae81ff">0</span>)))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">elif</span> start <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;cdr&#39;</span>:
</span></span><span style="display:flex;"><span>                    lines<span style="color:#f92672">.</span>append((indent, <span style="color:#e6db74">&#39;</span><span style="color:#e6db74">%s</span><span style="color:#e6db74">[1:]&#39;</span> <span style="color:#f92672">%</span> expr<span style="color:#f92672">.</span>pop(<span style="color:#ae81ff">0</span>)))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">elif</span> start <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;list&#39;</span>:
</span></span><span style="display:flex;"><span>                    arguments <span style="color:#f92672">=</span> []
</span></span><span style="display:flex;"><span>                    <span style="color:#66d9ef">while</span> expr:
</span></span><span style="display:flex;"><span>                        arguments<span style="color:#f92672">.</span>append(
</span></span><span style="display:flex;"><span>                            compile_expr(indent, expr<span style="color:#f92672">.</span>pop(<span style="color:#ae81ff">0</span>))[<span style="color:#ae81ff">0</span>][<span style="color:#ae81ff">1</span>]
</span></span><span style="display:flex;"><span>                        )
</span></span><span style="display:flex;"><span>                    lines<span style="color:#f92672">.</span>append((indent, <span style="color:#e6db74">&#39;[</span><span style="color:#e6db74">%s</span><span style="color:#e6db74">]&#39;</span> <span style="color:#f92672">%</span> <span style="color:#e6db74">&#39;, &#39;</span><span style="color:#f92672">.</span>join(arguments)))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">else</span>:
</span></span><span style="display:flex;"><span>                    <span style="color:#75715e"># Assume this is a function call</span>
</span></span><span style="display:flex;"><span>                    arguments <span style="color:#f92672">=</span> []
</span></span><span style="display:flex;"><span>                    <span style="color:#66d9ef">while</span> expr:
</span></span><span style="display:flex;"><span>                        arguments<span style="color:#f92672">.</span>append(
</span></span><span style="display:flex;"><span>                            compile_expr(indent, expr<span style="color:#f92672">.</span>pop(<span style="color:#ae81ff">0</span>))[<span style="color:#ae81ff">0</span>][<span style="color:#ae81ff">1</span>]
</span></span><span style="display:flex;"><span>                        )
</span></span><span style="display:flex;"><span>                    lines<span style="color:#f92672">.</span>append((
</span></span><span style="display:flex;"><span>                        indent,
</span></span><span style="display:flex;"><span>                        <span style="color:#e6db74">&#34;</span><span style="color:#e6db74">%s</span><span style="color:#e6db74">(</span><span style="color:#e6db74">%s</span><span style="color:#e6db74">)&#34;</span> <span style="color:#f92672">%</span> (start, <span style="color:#e6db74">&#39;, &#39;</span><span style="color:#f92672">.</span>join(arguments))
</span></span><span style="display:flex;"><span>                    ))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> lines
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> [compile_expr(<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>, expr) <span style="color:#66d9ef">for</span> expr <span style="color:#f92672">in</span> tree]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> __name__ <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;__main__&#39;</span>:
</span></span><span style="display:flex;"><span>    scheme <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;&#39;&#39;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        (define (output x)
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">            (if (null? x)
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">                &#34;&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">                (begin (display (car x))
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">                       (if (null? (cdr x))
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">                           (display &#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;)
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">                           (begin (display &#34; &#34;)
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">                                  (output (cdr x)))))))
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        (output (list &#34;just&#34; &#34;another&#34; &#34;scheme&#34; &#34;hacker&#34;))
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    &#39;&#39;&#39;</span>
</span></span><span style="display:flex;"><span>    python <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;&#39;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> expr <span style="color:#f92672">in</span> compile(parse(tokenize(scheme))):
</span></span><span style="display:flex;"><span>        python <span style="color:#f92672">+=</span> <span style="color:#e6db74">&#39;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#39;</span><span style="color:#f92672">.</span>join([(<span style="color:#e6db74">&#39; &#39;</span> <span style="color:#f92672">*</span> <span style="color:#ae81ff">4</span> <span style="color:#f92672">*</span> x[<span style="color:#ae81ff">0</span>]) <span style="color:#f92672">+</span> x[<span style="color:#ae81ff">1</span>] <span style="color:#66d9ef">for</span> x <span style="color:#f92672">in</span> expr]) <span style="color:#f92672">+</span> <span style="color:#e6db74">&#39;</span><span style="color:#ae81ff">\n\n</span><span style="color:#e6db74">&#39;</span>
</span></span><span style="display:flex;"><span>    exec(python)
</span></span></code></pre></div>]]></content:encoded>
    </item>
    
    <item>
      <title>🐪 Reformed JAPHs: Turing Machine</title>
      <link>https://ryanjoneil.github.io/posts/2011-04-18-reformed-japhs-turing-machine/</link>
      <pubDate>Mon, 18 Apr 2011 00:00:00 +0000</pubDate>
      
      <guid>https://ryanjoneil.github.io/posts/2011-04-18-reformed-japhs-turing-machine/</guid>
      <description>Python obfuscation with a Turing machine</description>
      <content:encoded><![CDATA[<p><em>Note: This post was edited for clarity.</em></p>
<p>This JAPH uses a <a href="https://en.wikipedia.org/wiki/Turing_machine">Turing machine</a>. The machine accepts any string that ends in <code>'\n'</code> and allows side effects. This lets us print the value of the tape as it encounters each character. While the idea of using lambda functions as side effects in a Turing machine is a little bizarre on many levels, we work with what we have. And Python is multi-paradigmatic, so what the heck.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> re
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">turing</span>(tape, transitions):
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># The tape input comes in as a string.  We approximate an infinite</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># length tape via a hash, so we need to convert this to {index: value}</span>
</span></span><span style="display:flex;"><span>    tape_hash <span style="color:#f92672">=</span> {i: x <span style="color:#66d9ef">for</span> i, x <span style="color:#f92672">in</span> enumerate(tape)}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Start at 0 using our transition matrix</span>
</span></span><span style="display:flex;"><span>    index <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>    state <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">while</span> <span style="color:#66d9ef">True</span>:
</span></span><span style="display:flex;"><span>        value <span style="color:#f92672">=</span> tape_hash<span style="color:#f92672">.</span>get(index, <span style="color:#e6db74">&#39;&#39;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># This is a modified Turing machine: it uses regexen</span>
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># and has side effects.  Oh well, I needed IO.</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">for</span> rule <span style="color:#f92672">in</span> transitions[state]:
</span></span><span style="display:flex;"><span>            regex, next, direction, new_value, side_effect <span style="color:#f92672">=</span> rule
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">if</span> re<span style="color:#f92672">.</span><span style="color:#66d9ef">match</span>(regex, value):
</span></span><span style="display:flex;"><span>                <span style="color:#75715e"># Terminal states</span>
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">if</span> new_value <span style="color:#f92672">in</span> (<span style="color:#e6db74">&#39;YES&#39;</span>, <span style="color:#e6db74">&#39;NO&#39;</span>):
</span></span><span style="display:flex;"><span>                    <span style="color:#66d9ef">return</span> new_value
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>                tape_hash[index] <span style="color:#f92672">=</span> new_value
</span></span><span style="display:flex;"><span>                side_effect(value)
</span></span><span style="display:flex;"><span>                index <span style="color:#f92672">+=</span> direction
</span></span><span style="display:flex;"><span>                state <span style="color:#f92672">=</span> next
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">break</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">assert</span> <span style="color:#e6db74">&#39;YES&#39;</span> <span style="color:#f92672">==</span> turing(<span style="color:#e6db74">&#39;just another python hacker</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#39;</span>, [
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># This Turing machine recognizes the language of strings that end in \n.</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Regex rule, next state, left/right = -1/+1, new value, side effect.</span>
</span></span><span style="display:flex;"><span>    [ <span style="color:#75715e"># State 0:</span>
</span></span><span style="display:flex;"><span>        [<span style="color:#e6db74">r</span><span style="color:#e6db74">&#39;^[a-z ]$&#39;</span>, <span style="color:#ae81ff">0</span>, <span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>, <span style="color:#e6db74">&#39;&#39;</span>, <span style="color:#66d9ef">lambda</span> x: print(x, end<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;&#39;</span>)],
</span></span><span style="display:flex;"><span>        [<span style="color:#e6db74">r</span><span style="color:#e6db74">&#39;^\n$&#39;</span>, <span style="color:#ae81ff">1</span>, <span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>, <span style="color:#e6db74">&#39;&#39;</span>, <span style="color:#66d9ef">lambda</span> x: print(x, end<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;&#39;</span>)],
</span></span><span style="display:flex;"><span>        [<span style="color:#e6db74">r</span><span style="color:#e6db74">&#39;^.*$&#39;</span>, <span style="color:#ae81ff">0</span>, <span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>, <span style="color:#e6db74">&#39;NO&#39;</span>, <span style="color:#66d9ef">None</span>],
</span></span><span style="display:flex;"><span>    ],
</span></span><span style="display:flex;"><span>    [ <span style="color:#75715e"># State 1:</span>
</span></span><span style="display:flex;"><span>        [<span style="color:#e6db74">r</span><span style="color:#e6db74">&#39;^$&#39;</span>, <span style="color:#ae81ff">1</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>, <span style="color:#e6db74">&#39;YES&#39;</span>, <span style="color:#66d9ef">None</span>]
</span></span><span style="display:flex;"><span>    ]
</span></span><span style="display:flex;"><span>])
</span></span></code></pre></div><p>Obfuscation again consists of converting the above code into lambda functions using Y combinators. This is a nice programming exercise, so I&rsquo;ve left it out of this post in case anyone wants to try. The Turing machine has to return <code>'YES'</code> to indicate that it accepts the string, thus the assertion. Our final obfuscated JAPH is a single expression.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">assert</span><span style="color:#e6db74">&#39;&#39;&#39;YES&#39;&#39;&#39;</span><span style="color:#f92672">==</span>(<span style="color:#66d9ef">lambda</span> g:(<span style="color:#66d9ef">lambda</span> f:g(<span style="color:#66d9ef">lambda</span> arg:f(f)(arg)))(<span style="color:#66d9ef">lambda</span> f:g(
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">lambda</span> arg: f(f)(arg))))(<span style="color:#66d9ef">lambda</span> f: <span style="color:#66d9ef">lambda</span> q:[(<span style="color:#66d9ef">lambda</span> g:(<span style="color:#66d9ef">lambda</span> f:g(<span style="color:#66d9ef">lambda</span>
</span></span><span style="display:flex;"><span>arg:f(f)(arg)))(<span style="color:#66d9ef">lambda</span> f: g(<span style="color:#66d9ef">lambda</span> arg:f(f)(arg))))(<span style="color:#66d9ef">lambda</span> f: <span style="color:#66d9ef">lambda</span> x:(x
</span></span><span style="display:flex;"><span>[<span style="color:#ae81ff">0</span>][<span style="color:#ae81ff">0</span>]<span style="color:#66d9ef">if</span> x[<span style="color:#ae81ff">0</span>] <span style="color:#f92672">and</span> __import__(<span style="color:#e6db74">&#39;re&#39;</span>)<span style="color:#f92672">.</span><span style="color:#66d9ef">match</span>(x[<span style="color:#ae81ff">0</span>][<span style="color:#ae81ff">0</span>][<span style="color:#ae81ff">0</span>],x[<span style="color:#ae81ff">1</span>])<span style="color:#66d9ef">else</span> f([x[<span style="color:#ae81ff">0</span>][<span style="color:#ae81ff">1</span>:]
</span></span><span style="display:flex;"><span>,x[<span style="color:#ae81ff">1</span>]]))) ([q[<span style="color:#ae81ff">3</span>][q[<span style="color:#ae81ff">1</span>]],q[<span style="color:#ae81ff">2</span>]<span style="color:#f92672">.</span>get(q[<span style="color:#ae81ff">0</span>],<span style="color:#e6db74">&#39;&#39;</span>)])[<span style="color:#ae81ff">4</span>](q[<span style="color:#ae81ff">2</span>]<span style="color:#f92672">.</span>get(q[<span style="color:#ae81ff">0</span>],<span style="color:#e6db74">&#39;&#39;</span>)), (<span style="color:#66d9ef">lambda</span>
</span></span><span style="display:flex;"><span>g:(<span style="color:#66d9ef">lambda</span> f:g(<span style="color:#66d9ef">lambda</span> arg:f(f)(arg))) (<span style="color:#66d9ef">lambda</span> f:g(<span style="color:#66d9ef">lambda</span> arg:f(f)(arg))))(
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">lambda</span> f:<span style="color:#66d9ef">lambda</span> x:(x[<span style="color:#ae81ff">0</span>][<span style="color:#ae81ff">0</span>]<span style="color:#66d9ef">if</span> x[<span style="color:#ae81ff">0</span>] <span style="color:#f92672">and</span> __import__(<span style="color:#e6db74">&#39;re&#39;</span>)<span style="color:#f92672">.</span><span style="color:#66d9ef">match</span>(x[<span style="color:#ae81ff">0</span>][<span style="color:#ae81ff">0</span>][<span style="color:#ae81ff">0</span>],x
</span></span><span style="display:flex;"><span>[<span style="color:#ae81ff">1</span>])<span style="color:#66d9ef">else</span> f([x[<span style="color:#ae81ff">0</span>][<span style="color:#ae81ff">1</span>:],x[<span style="color:#ae81ff">1</span>]])))([q[<span style="color:#ae81ff">3</span>][q[<span style="color:#ae81ff">1</span>]],q[<span style="color:#ae81ff">2</span>]<span style="color:#f92672">.</span>get(q[<span style="color:#ae81ff">0</span>],<span style="color:#e6db74">&#39;&#39;</span>)])[<span style="color:#ae81ff">3</span>]<span style="color:#66d9ef">if</span>(<span style="color:#66d9ef">lambda</span>
</span></span><span style="display:flex;"><span>g:(<span style="color:#66d9ef">lambda</span> f:g(<span style="color:#66d9ef">lambda</span> arg:f(f)(arg))) (<span style="color:#66d9ef">lambda</span> f:g(<span style="color:#66d9ef">lambda</span> arg:f(f)(arg))))(
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">lambda</span> f:<span style="color:#66d9ef">lambda</span> x:(x[<span style="color:#ae81ff">0</span>][<span style="color:#ae81ff">0</span>]<span style="color:#66d9ef">if</span> x[<span style="color:#ae81ff">0</span>]<span style="color:#f92672">and</span> __import__(<span style="color:#e6db74">&#39;re&#39;</span>)<span style="color:#f92672">.</span><span style="color:#66d9ef">match</span>(x[<span style="color:#ae81ff">0</span>][<span style="color:#ae81ff">0</span>][<span style="color:#ae81ff">0</span>],x[
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">1</span>]) <span style="color:#66d9ef">else</span> f([x[<span style="color:#ae81ff">0</span>][<span style="color:#ae81ff">1</span>:],x[<span style="color:#ae81ff">1</span>]])))([q[<span style="color:#ae81ff">3</span>][q[<span style="color:#ae81ff">1</span>]],q[<span style="color:#ae81ff">2</span>]<span style="color:#f92672">.</span>get(q[<span style="color:#ae81ff">0</span>],<span style="color:#e6db74">&#39;&#39;</span>)])[<span style="color:#ae81ff">3</span>]<span style="color:#f92672">in</span>(<span style="color:#e6db74">&#39;YES&#39;</span>,
</span></span><span style="display:flex;"><span><span style="color:#e6db74">&#39;NO&#39;</span>)<span style="color:#66d9ef">else</span> f([q[<span style="color:#ae81ff">0</span>]<span style="color:#f92672">+</span>(<span style="color:#66d9ef">lambda</span> g:(<span style="color:#66d9ef">lambda</span> f:g(<span style="color:#66d9ef">lambda</span> arg:f(f)(arg)))(<span style="color:#66d9ef">lambda</span> f:g
</span></span><span style="display:flex;"><span>(<span style="color:#66d9ef">lambda</span> arg:f(f)(arg))))(<span style="color:#66d9ef">lambda</span> f:<span style="color:#66d9ef">lambda</span> x:(x[<span style="color:#ae81ff">0</span>][<span style="color:#ae81ff">0</span>]<span style="color:#66d9ef">if</span> x[<span style="color:#ae81ff">0</span>]<span style="color:#f92672">and</span> __import__(
</span></span><span style="display:flex;"><span><span style="color:#e6db74">&#39;re&#39;</span>)<span style="color:#f92672">.</span><span style="color:#66d9ef">match</span>(x[<span style="color:#ae81ff">0</span>][<span style="color:#ae81ff">0</span>][<span style="color:#ae81ff">0</span>],x[<span style="color:#ae81ff">1</span>])<span style="color:#66d9ef">else</span> f([x[<span style="color:#ae81ff">0</span>][<span style="color:#ae81ff">1</span>:], x[<span style="color:#ae81ff">1</span>]])))([q[<span style="color:#ae81ff">3</span>][q[<span style="color:#ae81ff">1</span>]], q[<span style="color:#ae81ff">2</span>]<span style="color:#f92672">.</span>
</span></span><span style="display:flex;"><span>get(q[<span style="color:#ae81ff">0</span>],<span style="color:#e6db74">&#39;&#39;</span>)])[<span style="color:#ae81ff">2</span>],(<span style="color:#66d9ef">lambda</span> g:(<span style="color:#66d9ef">lambda</span> f:g(<span style="color:#66d9ef">lambda</span> arg: f(f)(arg)))(<span style="color:#66d9ef">lambda</span> f:
</span></span><span style="display:flex;"><span>g(<span style="color:#66d9ef">lambda</span> arg:f(f)(arg))))(<span style="color:#66d9ef">lambda</span> f:<span style="color:#66d9ef">lambda</span> x:(x[<span style="color:#ae81ff">0</span>][<span style="color:#ae81ff">0</span>]<span style="color:#66d9ef">if</span> x[<span style="color:#ae81ff">0</span>]<span style="color:#f92672">and</span> __import__
</span></span><span style="display:flex;"><span>(<span style="color:#e6db74">&#39;re&#39;</span>)<span style="color:#f92672">.</span><span style="color:#66d9ef">match</span>(x[<span style="color:#ae81ff">0</span>][<span style="color:#ae81ff">0</span>][<span style="color:#ae81ff">0</span>],x[<span style="color:#ae81ff">1</span>])<span style="color:#66d9ef">else</span> f([x[<span style="color:#ae81ff">0</span>][<span style="color:#ae81ff">1</span>:], x[<span style="color:#ae81ff">1</span>]])))([q[<span style="color:#ae81ff">3</span>][q[<span style="color:#ae81ff">1</span>]],q[<span style="color:#ae81ff">2</span>]<span style="color:#f92672">.</span>
</span></span><span style="display:flex;"><span>get(q[<span style="color:#ae81ff">0</span>],<span style="color:#e6db74">&#39;&#39;</span>)])[<span style="color:#ae81ff">1</span>],q[<span style="color:#ae81ff">2</span>],q[<span style="color:#ae81ff">3</span>]])][<span style="color:#ae81ff">1</span>])([<span style="color:#ae81ff">0</span>,<span style="color:#ae81ff">0</span>,{i:x <span style="color:#66d9ef">for</span> i,x <span style="color:#f92672">in</span> enumerate(<span style="color:#e6db74">&#39;just &#39;</span>
</span></span><span style="display:flex;"><span><span style="color:#e6db74">&#39;another python hacker</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#39;</span>)}, [[[<span style="color:#e6db74">r</span><span style="color:#e6db74">&#39;^[a-z ]$&#39;</span>,<span style="color:#ae81ff">0</span>,<span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>,<span style="color:#e6db74">&#39;&#39;</span>,<span style="color:#66d9ef">lambda</span> x:print(x,end<span style="color:#f92672">=</span>
</span></span><span style="display:flex;"><span><span style="color:#e6db74">&#39;&#39;</span>)], [<span style="color:#e6db74">r</span><span style="color:#e6db74">&#39;^\n$&#39;</span>,<span style="color:#ae81ff">1</span>,<span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>,<span style="color:#e6db74">&#39;&#39;</span>,<span style="color:#66d9ef">lambda</span> x:print(x, end<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;&#39;</span>)],[<span style="color:#e6db74">r</span><span style="color:#e6db74">&#39;^.*$&#39;</span>,<span style="color:#ae81ff">0</span>,<span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>,<span style="color:#e6db74">&#39;&#39;&#39;NO&#39;&#39;&#39;</span>,
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">lambda</span> x:<span style="color:#66d9ef">None</span>]], [[<span style="color:#e6db74">r</span><span style="color:#e6db74">&#39;&#39;&#39;^$&#39;&#39;&#39;</span>,<span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>,<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>,<span style="color:#e6db74">&#39;&#39;&#39;YES&#39;&#39;&#39;</span>, <span style="color:#66d9ef">lambda</span> x: <span style="color:#66d9ef">None</span> <span style="color:#f92672">or</span> <span style="color:#66d9ef">None</span>]]]])
</span></span></code></pre></div>]]></content:encoded>
    </item>
    
    <item>
      <title>🐪 Reformed JAPHs: Huffman Coding</title>
      <link>https://ryanjoneil.github.io/posts/2011-04-14-reformed-japhs-huffman-coding/</link>
      <pubDate>Thu, 14 Apr 2011 00:00:00 +0000</pubDate>
      
      <guid>https://ryanjoneil.github.io/posts/2011-04-14-reformed-japhs-huffman-coding/</guid>
      <description>Python obfuscation and Huffman coding</description>
      <content:encoded><![CDATA[<p><em>Note: This post was edited for clarity.</em></p>
<p>At this point, tricking <code>python</code> into printing strings via indirect means got a little boring. So I switched to obfuscating fundamental computer science algorithms. Here&rsquo;s a JAPH that takes in a <a href="https://en.wikipedia.org/wiki/Huffman_coding">Huffman coded</a> version of <code>'just another python hacker'</code>, decodes, and prints it.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># Build coding tree</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">build_tree</span>(scheme):
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> scheme<span style="color:#f92672">.</span>startswith(<span style="color:#e6db74">&#39;*&#39;</span>):
</span></span><span style="display:flex;"><span>        left, scheme <span style="color:#f92672">=</span> build_tree(scheme[<span style="color:#ae81ff">1</span>:])
</span></span><span style="display:flex;"><span>        right, scheme <span style="color:#f92672">=</span> build_tree(scheme)
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> (left, right), scheme
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">else</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> scheme[<span style="color:#ae81ff">0</span>], scheme[<span style="color:#ae81ff">1</span>:]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">decode</span>(tree, encoded):
</span></span><span style="display:flex;"><span>    ret <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;&#39;</span>
</span></span><span style="display:flex;"><span>    node <span style="color:#f92672">=</span> tree
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> direction <span style="color:#f92672">in</span> encoded:
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> direction <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;0&#39;</span>:
</span></span><span style="display:flex;"><span>            node <span style="color:#f92672">=</span> node[<span style="color:#ae81ff">0</span>]
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">else</span>:
</span></span><span style="display:flex;"><span>            node <span style="color:#f92672">=</span> node[<span style="color:#ae81ff">1</span>]
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> isinstance(node, str):
</span></span><span style="display:flex;"><span>            ret <span style="color:#f92672">+=</span> node
</span></span><span style="display:flex;"><span>            node <span style="color:#f92672">=</span> tree
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> ret
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>tree <span style="color:#f92672">=</span> build_tree(<span style="color:#e6db74">&#39;*****ju*sp*er***yct* h**ka*no&#39;</span>)[<span style="color:#ae81ff">0</span>]
</span></span><span style="display:flex;"><span>print(
</span></span><span style="display:flex;"><span>    decode(tree, bin(<span style="color:#ae81ff">10627344201836243859174935587</span>)<span style="color:#f92672">.</span>lstrip(<span style="color:#e6db74">&#39;0b&#39;</span>)<span style="color:#f92672">.</span>zfill(<span style="color:#ae81ff">103</span>))
</span></span><span style="display:flex;"><span>)
</span></span></code></pre></div><p>The decoding tree is like a LISP-style sequence of pairs. <code>'*'</code> represents a branch in the tree while other characters are leaf nodes. This looks like the following.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>(
</span></span><span style="display:flex;"><span>    (
</span></span><span style="display:flex;"><span>        (
</span></span><span style="display:flex;"><span>            (
</span></span><span style="display:flex;"><span>                (<span style="color:#e6db74">&#39;j&#39;</span>, <span style="color:#e6db74">&#39;u&#39;</span>), 
</span></span><span style="display:flex;"><span>                (<span style="color:#e6db74">&#39;s&#39;</span>, <span style="color:#e6db74">&#39;p&#39;</span>)
</span></span><span style="display:flex;"><span>            ), 
</span></span><span style="display:flex;"><span>            (<span style="color:#e6db74">&#39;e&#39;</span>, <span style="color:#e6db74">&#39;r&#39;</span>)
</span></span><span style="display:flex;"><span>        ), 
</span></span><span style="display:flex;"><span>        (
</span></span><span style="display:flex;"><span>            (
</span></span><span style="display:flex;"><span>                (<span style="color:#e6db74">&#39;y&#39;</span>, <span style="color:#e6db74">&#39;c&#39;</span>), 
</span></span><span style="display:flex;"><span>                <span style="color:#e6db74">&#39;t&#39;</span>
</span></span><span style="display:flex;"><span>            ), 
</span></span><span style="display:flex;"><span>            (<span style="color:#e6db74">&#39; &#39;</span>, <span style="color:#e6db74">&#39;h&#39;</span>)
</span></span><span style="display:flex;"><span>        )
</span></span><span style="display:flex;"><span>    ), 
</span></span><span style="display:flex;"><span>    (
</span></span><span style="display:flex;"><span>        (<span style="color:#e6db74">&#39;k&#39;</span>, <span style="color:#e6db74">&#39;a&#39;</span>), 
</span></span><span style="display:flex;"><span>        (<span style="color:#e6db74">&#39;n&#39;</span>, <span style="color:#e6db74">&#39;o&#39;</span>)
</span></span><span style="display:flex;"><span>    )
</span></span><span style="display:flex;"><span>)
</span></span></code></pre></div><p>The actual Huffman coded version of our favorite string gets about 50% smaller represented in base-2.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-txt" data-lang="txt"><span style="display:flex;"><span>0000000001000100101011010111011101010111001000110110000110100001010111111110011001111010100110000100011
</span></span></code></pre></div><p>There&rsquo;s a catch here, which is that this is hard to obfuscate unless we turn it into a single expression. This means that we have to convert <code>build_tree</code> and <code>decode</code> into lambda functions. Unfortunately, they are recursive and lambda functions recurse naturally. Fortunately, we can use <a href="https://code.activestate.com/recipes/576366-y-combinator/">Y combinators</a> to get around the problem. These are worth some study since they will pop up again in future JAPHs.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>Y <span style="color:#f92672">=</span> <span style="color:#66d9ef">lambda</span> g: (
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">lambda</span> f: g(<span style="color:#66d9ef">lambda</span> arg: f(f)(arg))) (<span style="color:#66d9ef">lambda</span> f: g(<span style="color:#66d9ef">lambda</span> arg: f(f)(arg))
</span></span><span style="display:flex;"><span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>build_tree <span style="color:#f92672">=</span> Y(
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">lambda</span> f: <span style="color:#66d9ef">lambda</span> scheme: (
</span></span><span style="display:flex;"><span>        (f(scheme[<span style="color:#ae81ff">1</span>:])[<span style="color:#ae81ff">0</span>], f(f(scheme[<span style="color:#ae81ff">1</span>:])[<span style="color:#ae81ff">1</span>])[<span style="color:#ae81ff">0</span>]),
</span></span><span style="display:flex;"><span>        f(f(scheme[<span style="color:#ae81ff">1</span>:])[<span style="color:#ae81ff">1</span>])[<span style="color:#ae81ff">1</span> ]
</span></span><span style="display:flex;"><span>    ) <span style="color:#66d9ef">if</span> scheme<span style="color:#f92672">.</span>startswith(<span style="color:#e6db74">&#39;*&#39;</span>) <span style="color:#66d9ef">else</span> (scheme[<span style="color:#ae81ff">0</span>], scheme[<span style="color:#ae81ff">1</span>:])
</span></span><span style="display:flex;"><span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>decode <span style="color:#f92672">=</span> Y(<span style="color:#66d9ef">lambda</span> f: <span style="color:#66d9ef">lambda</span> x: x[<span style="color:#ae81ff">3</span>]<span style="color:#f92672">+</span>x[<span style="color:#ae81ff">1</span>] <span style="color:#66d9ef">if</span> <span style="color:#f92672">not</span> x[<span style="color:#ae81ff">2</span>] <span style="color:#66d9ef">else</span> (
</span></span><span style="display:flex;"><span>    f([x[<span style="color:#ae81ff">0</span>], x[<span style="color:#ae81ff">0</span>], x[<span style="color:#ae81ff">2</span>], x[<span style="color:#ae81ff">3</span>]<span style="color:#f92672">+</span>x[<span style="color:#ae81ff">1</span>]]) <span style="color:#66d9ef">if</span> isinstance(x[<span style="color:#ae81ff">1</span>], str) <span style="color:#66d9ef">else</span> (
</span></span><span style="display:flex;"><span>        f([x[<span style="color:#ae81ff">0</span>], x[<span style="color:#ae81ff">1</span>][<span style="color:#ae81ff">0</span>], x[<span style="color:#ae81ff">2</span>][<span style="color:#ae81ff">1</span>:], x[<span style="color:#ae81ff">3</span>]]) <span style="color:#66d9ef">if</span> x[<span style="color:#ae81ff">2</span>][<span style="color:#ae81ff">0</span>] <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;0&#39;</span> <span style="color:#66d9ef">else</span> (
</span></span><span style="display:flex;"><span>            f([x[<span style="color:#ae81ff">0</span>], x[<span style="color:#ae81ff">1</span>][<span style="color:#ae81ff">1</span>], x[<span style="color:#ae81ff">2</span>][<span style="color:#ae81ff">1</span>:], x[<span style="color:#ae81ff">3</span>]])
</span></span><span style="display:flex;"><span>        )
</span></span><span style="display:flex;"><span>    )
</span></span><span style="display:flex;"><span>))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>tree <span style="color:#f92672">=</span> build_tree(<span style="color:#e6db74">&#39;*****ju*sp*er***yct* h**ka*no&#39;</span>)[<span style="color:#ae81ff">0</span>]
</span></span><span style="display:flex;"><span>print(
</span></span><span style="display:flex;"><span>    decode([
</span></span><span style="display:flex;"><span>        tree,
</span></span><span style="display:flex;"><span>        tree,
</span></span><span style="display:flex;"><span>        bin(<span style="color:#ae81ff">10627344201836243859174935587</span>)<span style="color:#f92672">.</span>lstrip(<span style="color:#e6db74">&#39;0b&#39;</span>)<span style="color:#f92672">.</span>zfill(<span style="color:#ae81ff">103</span>), <span style="color:#e6db74">&#39;&#39;</span>
</span></span><span style="display:flex;"><span>    ])
</span></span><span style="display:flex;"><span>)
</span></span></code></pre></div><p>The final version is a condensed (and expanded, oddly) version of the above.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>print((<span style="color:#66d9ef">lambda</span> t,e,s:(<span style="color:#66d9ef">lambda</span> g:(<span style="color:#66d9ef">lambda</span> f:g(<span style="color:#66d9ef">lambda</span> arg:f(f)(arg)))(<span style="color:#66d9ef">lambda</span> f:
</span></span><span style="display:flex;"><span>g(<span style="color:#66d9ef">lambda</span> arg: f(f)(arg))))(<span style="color:#66d9ef">lambda</span> f:<span style="color:#66d9ef">lambda</span> x: x[<span style="color:#ae81ff">3</span>]<span style="color:#f92672">+</span>x[<span style="color:#ae81ff">1</span>]<span style="color:#66d9ef">if</span> <span style="color:#f92672">not</span> x[<span style="color:#ae81ff">2</span>]<span style="color:#66d9ef">else</span> f([
</span></span><span style="display:flex;"><span>x[<span style="color:#ae81ff">0</span>],x[<span style="color:#ae81ff">0</span>],x[<span style="color:#ae81ff">2</span>],x[<span style="color:#ae81ff">3</span>]<span style="color:#f92672">+</span>x[<span style="color:#ae81ff">1</span>]])<span style="color:#66d9ef">if</span> isinstance(x[<span style="color:#ae81ff">1</span>],str)<span style="color:#66d9ef">else</span> f([x[<span style="color:#ae81ff">0</span>],x[<span style="color:#ae81ff">1</span>][<span style="color:#ae81ff">0</span>],x[<span style="color:#ae81ff">2</span>]
</span></span><span style="display:flex;"><span>[<span style="color:#ae81ff">1</span>:],x[<span style="color:#ae81ff">3</span>]])<span style="color:#66d9ef">if</span> x[<span style="color:#ae81ff">2</span>][<span style="color:#ae81ff">0</span>]<span style="color:#f92672">==</span><span style="color:#e6db74">&#39;0&#39;</span><span style="color:#66d9ef">else</span> f([x[<span style="color:#ae81ff">0</span>],x[<span style="color:#ae81ff">1</span>][<span style="color:#ae81ff">1</span>],x[<span style="color:#ae81ff">2</span>][<span style="color:#ae81ff">1</span>:],x[<span style="color:#ae81ff">3</span>]]))([t,t,e,s])
</span></span><span style="display:flex;"><span>)((<span style="color:#66d9ef">lambda</span> g:(<span style="color:#66d9ef">lambda</span> f:g(<span style="color:#66d9ef">lambda</span> arg:f(f)(arg)))(<span style="color:#66d9ef">lambda</span> f:g(<span style="color:#66d9ef">lambda</span> arg:f(f)(
</span></span><span style="display:flex;"><span>arg))))(<span style="color:#66d9ef">lambda</span> f:<span style="color:#66d9ef">lambda</span> p:((f(p[<span style="color:#ae81ff">1</span>:])[<span style="color:#ae81ff">0</span>],f(f(p[<span style="color:#ae81ff">1</span>:])[<span style="color:#ae81ff">1</span>])[<span style="color:#ae81ff">0</span>]),f(f(p[<span style="color:#ae81ff">1</span>:])[<span style="color:#ae81ff">1</span>])[
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">1</span>])<span style="color:#66d9ef">if</span> p<span style="color:#f92672">.</span>startswith(<span style="color:#e6db74">&#39;*&#39;</span>)<span style="color:#66d9ef">else</span>(p[<span style="color:#ae81ff">0</span>],p[<span style="color:#ae81ff">1</span>:]))(<span style="color:#e6db74">&#39;*****ju*sp*er***yct* h**ka*no&#39;</span>)[
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0</span>],bin(<span style="color:#ae81ff">10627344201836243859179756385</span><span style="color:#f92672">-</span><span style="color:#ae81ff">4820798</span>)<span style="color:#f92672">.</span>lstrip(<span style="color:#e6db74">&#39;0b&#39;</span>)<span style="color:#f92672">.</span>zfill(<span style="color:#ae81ff">103</span>),<span style="color:#e6db74">&#39;&#39;</span>))
</span></span></code></pre></div>]]></content:encoded>
    </item>
    
    <item>
      <title>🐪 Reformed JAPHs: Rolling Effect</title>
      <link>https://ryanjoneil.github.io/posts/2011-04-11-reformed-japhs-rolling-effect/</link>
      <pubDate>Mon, 11 Apr 2011 00:00:00 +0000</pubDate>
      
      <guid>https://ryanjoneil.github.io/posts/2011-04-11-reformed-japhs-rolling-effect/</guid>
      <description>Python obfuscation with a cute visual effect</description>
      <content:encoded><![CDATA[<p><em>Note: This post was updated to work with Python 3.12. It may not work with different versions.</em></p>
<p>Here&rsquo;s a JAPH composed solely for effect. For each letter in <code>'just another python hacker'</code> it loops over each the characters <code>' abcdefghijklmnopqrstuvwxyz'</code>, printing each. Between characters it pauses for 0.05 seconds, backing up and moving on to the next if it hasn&rsquo;t reached the desired one yet. This achieves a sort of rolling effect by which the final string appears on our screen over time.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> string
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> sys
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> time
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>letters <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39; &#39;</span> <span style="color:#f92672">+</span> string<span style="color:#f92672">.</span>ascii_lowercase
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> l <span style="color:#f92672">in</span> <span style="color:#e6db74">&#39;just another python hacker&#39;</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> x <span style="color:#f92672">in</span> letters:
</span></span><span style="display:flex;"><span>        print(x, end<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;&#39;</span>)
</span></span><span style="display:flex;"><span>        sys<span style="color:#f92672">.</span>stdout<span style="color:#f92672">.</span>flush()
</span></span><span style="display:flex;"><span>        time<span style="color:#f92672">.</span>sleep(<span style="color:#ae81ff">0.05</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> x <span style="color:#f92672">==</span> l:
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">break</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">else</span>:
</span></span><span style="display:flex;"><span>            print(<span style="color:#e6db74">&#39;</span><span style="color:#ae81ff">\b</span><span style="color:#e6db74">&#39;</span>, end<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;&#39;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>print()
</span></span></code></pre></div><p>We locate and print each letter in the string with a list comprehension.  At the end we have an extra line of code (the eval statement) that gives us our newline.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>[[(<span style="color:#66d9ef">lambda</span> x,l:str(print(x,end<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;&#39;</span>))<span style="color:#f92672">+</span>str(__import__(print<span style="color:#f92672">.</span>
</span></span><span style="display:flex;"><span>__doc__[print<span style="color:#f92672">.</span>__doc__<span style="color:#f92672">.</span>index(<span style="color:#e6db74">&#39;stdout&#39;</span>) <span style="color:#f92672">-</span> <span style="color:#ae81ff">4</span>:print<span style="color:#f92672">.</span>__doc__<span style="color:#f92672">.</span>
</span></span><span style="display:flex;"><span>index(<span style="color:#e6db74">&#39;stdout&#39;</span>)<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>])<span style="color:#f92672">.</span>stdout<span style="color:#f92672">.</span>flush()) <span style="color:#f92672">+</span> str(__import__(<span style="color:#e6db74">&#39;&#39;</span><span style="color:#f92672">.</span>
</span></span><span style="display:flex;"><span>join(reversed(<span style="color:#e6db74">&#39;emit&#39;</span>)))<span style="color:#f92672">.</span>sleep(<span style="color:#ae81ff">0o5</span><span style="color:#f92672">*</span><span style="color:#ae81ff">1.01</span><span style="color:#f92672">/</span><span style="color:#ae81ff">0x64</span>))<span style="color:#f92672">+</span>str(print(
</span></span><span style="display:flex;"><span><span style="color:#e6db74">&#39;</span><span style="color:#ae81ff">\b</span><span style="color:#e6db74">&#39;</span>,end<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;</span><span style="color:#ae81ff">\x09</span><span style="color:#e6db74">&#39;</span><span style="color:#f92672">.</span>strip())<span style="color:#66d9ef">if</span> x<span style="color:#f92672">!=</span>l <span style="color:#66d9ef">else</span><span style="color:#e6db74">&#39;*&amp;#&#39;</span>))(x1,l1)<span style="color:#66d9ef">for</span> x1
</span></span><span style="display:flex;"><span><span style="color:#f92672">in</span>(<span style="color:#e6db74">&#39;</span><span style="color:#ae81ff">\x20</span><span style="color:#e6db74">&#39;</span><span style="color:#f92672">+</span>getattr(__import__(type(<span style="color:#e6db74">&#39;phear&#39;</span>)<span style="color:#f92672">.</span>__name__<span style="color:#f92672">+</span><span style="color:#e6db74">&#39;in&#39;</span>
</span></span><span style="display:flex;"><span><span style="color:#e6db74">&#39;g&#39;</span>),dir(__import__(type(<span style="color:#e6db74">&#39;snarf&#39;</span>)<span style="color:#f92672">.</span>__name__<span style="color:#f92672">+</span><span style="color:#e6db74">&#39;ing&#39;</span>))[<span style="color:#ae81ff">15</span>]))
</span></span><span style="display:flex;"><span>[:(<span style="color:#e6db74">&#39;</span><span style="color:#ae81ff">\x20</span><span style="color:#e6db74">&#39;</span><span style="color:#f92672">+</span>getattr(__import__(type(<span style="color:#e6db74">&#39;smear&#39;</span>)<span style="color:#f92672">.</span>__name__<span style="color:#f92672">+</span><span style="color:#e6db74">&#39;in&#39;</span>
</span></span><span style="display:flex;"><span><span style="color:#e6db74">&#39;g&#39;</span>),dir(__import__(type(<span style="color:#e6db74">&#39;slurp&#39;</span>)<span style="color:#f92672">.</span>__name__<span style="color:#f92672">+</span><span style="color:#e6db74">&#39;ing&#39;</span>))[<span style="color:#ae81ff">15</span>]))
</span></span><span style="display:flex;"><span><span style="color:#f92672">.</span>index(l1)<span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>]]<span style="color:#66d9ef">for</span> l1 <span style="color:#f92672">in</span><span style="color:#e6db74">&#39;&#39;&#39;just another python hacker&#39;&#39;&#39;</span>]
</span></span><span style="display:flex;"><span>eval(<span style="color:#e6db74">&#39;&#39;&#39;</span><span style="color:#ae81ff">\x20\x09</span><span style="color:#e6db74">eval(&#34;</span><span style="color:#ae81ff">\x20\x09</span><span style="color:#e6db74">eval(&#39;</span><span style="color:#ae81ff">\x20</span><span style="color:#e6db74"> print()&#39;)&#34;)&#39;&#39;&#39;</span>)
</span></span></code></pre></div>]]></content:encoded>
    </item>
    
    <item>
      <title>🐪 Reformed JAPHs: ROT13</title>
      <link>https://ryanjoneil.github.io/posts/2011-04-06-reformed-japhs-rot13/</link>
      <pubDate>Wed, 06 Apr 2011 00:00:00 +0000</pubDate>
      
      <guid>https://ryanjoneil.github.io/posts/2011-04-06-reformed-japhs-rot13/</guid>
      <description>Python obfuscation using ROT13 encoding</description>
      <content:encoded><![CDATA[<p><em>Note: This post was updated to work with Python 3.12. It may not work with different versions.</em></p>
<p>No series of JAPHs would be complete without <a href="https://en.wikipedia.org/wiki/ROT13">ROT13</a>. This is the example through which aspiring Perl programmers learn to use <code>tr</code> and its synonym <code>y</code>. In Perl the basic ROT13 JAPH starts as:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-perl" data-lang="perl"><span style="display:flex;"><span>$foo <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;whfg nabgure crey unpxre&#39;</span>;
</span></span><span style="display:flex;"><span>$foo <span style="color:#f92672">=~</span> y<span style="color:#e6db74">/a-z/</span>n<span style="color:#f92672">-</span>za<span style="color:#f92672">-</span><span style="color:#e6db74">m</span><span style="color:#960050;background-color:#1e0010">/;</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">print</span> $foo;
</span></span></code></pre></div><p>Python has nothing quite so elegant in its default namespace. However, this does give us the opportunity to explore a little used aspect of strings: the translate method. If we construct a dictionary of ordinals we can accomplish the same thing with a touch more effort.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> string
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>table <span style="color:#f92672">=</span> {
</span></span><span style="display:flex;"><span>    ord(x): ord(y) <span style="color:#66d9ef">for</span> x, y <span style="color:#f92672">in</span> zip(
</span></span><span style="display:flex;"><span>        string<span style="color:#f92672">.</span>ascii_lowercase,
</span></span><span style="display:flex;"><span>        string<span style="color:#f92672">.</span>ascii_lowercase[<span style="color:#ae81ff">13</span>:] <span style="color:#f92672">+</span> string<span style="color:#f92672">.</span>ascii_lowercase
</span></span><span style="display:flex;"><span>    )
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>print(<span style="color:#e6db74">&#39;whfg nabgure clguba unpxre&#39;</span><span style="color:#f92672">.</span>translate(table))
</span></span></code></pre></div><p>We obfuscate the construction of this translation dictionary and, for added measure, use <code>getattr</code> to find the <code>print</code> function off of <code>__builtins__</code>.  This will likely only work in Python 3.2, since the order of attributes on <code>__builtins__</code> matters.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>getattr(vars()[list(filter(<span style="color:#66d9ef">lambda</span> _:<span style="color:#e6db74">&#39;</span><span style="color:#ae81ff">\x5f\x62</span><span style="color:#e6db74">&#39;</span><span style="color:#f92672">in</span> _,dir
</span></span><span style="display:flex;"><span>()))[<span style="color:#ae81ff">0</span>]], dir(vars()[list(filter(<span style="color:#66d9ef">lambda</span> _:<span style="color:#e6db74">&#39;</span><span style="color:#ae81ff">\x5f\x62</span><span style="color:#e6db74">&#39;</span><span style="color:#f92672">in</span>
</span></span><span style="display:flex;"><span>_, dir()))[<span style="color:#ae81ff">0</span>]])[list(filter(<span style="color:#66d9ef">lambda</span> _:_ [<span style="color:#ae81ff">1</span>]<span style="color:#f92672">.</span>startswith(
</span></span><span style="display:flex;"><span><span style="color:#e6db74">&#39;</span><span style="color:#ae81ff">\x70\x72</span><span style="color:#e6db74">&#39;</span>),enumerate(dir(vars()[list(filter(<span style="color:#66d9ef">lambda</span> _:
</span></span><span style="display:flex;"><span><span style="color:#e6db74">&#39;</span><span style="color:#ae81ff">\x5f\x62</span><span style="color:#e6db74">&#39;</span><span style="color:#f92672">in</span> _,dir()))[<span style="color:#ae81ff">0</span>]]))))[<span style="color:#ae81ff">0</span>][<span style="color:#ae81ff">0</span>]])(getattr(<span style="color:#e6db74">&#39;whfg &#39;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">+</span><span style="color:#e6db74">&#39;&#39;&#39;nabgure clguba unpxre&#39;&#39;&#39;</span>, dir(<span style="color:#e6db74">&#39;0o52&#39;</span>)[<span style="color:#ae81ff">0o116</span>])({ _:
</span></span><span style="display:flex;"><span>(_<span style="color:#f92672">-</span><span style="color:#ae81ff">0o124</span>) <span style="color:#f92672">%</span><span style="color:#ae81ff">0o32</span> <span style="color:#f92672">+</span><span style="color:#ae81ff">0o141</span> <span style="color:#66d9ef">for</span> _ <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">0o141</span>, <span style="color:#ae81ff">0o173</span>)}))
</span></span></code></pre></div>]]></content:encoded>
    </item>
    
    <item>
      <title>🐪 Reformed JAPHs: Ridiculous Anagram</title>
      <link>https://ryanjoneil.github.io/posts/2011-04-03-reformed-japhs-ridiculous-anagram/</link>
      <pubDate>Sun, 03 Apr 2011 00:00:00 +0000</pubDate>
      
      <guid>https://ryanjoneil.github.io/posts/2011-04-03-reformed-japhs-ridiculous-anagram/</guid>
      <description>Python obfuscation using anagrams</description>
      <content:encoded><![CDATA[<p>Here&rsquo;s the second in my reformed JAPH series. It takes an anagram of <code>'just another python hacker'</code> and converts it prior to printing. It sorts the anagram by the indices of another string, in order of their associated characters. This is sort of like a pre-digested <a href="https://en.wikipedia.org/wiki/Schwartzian_transform">Schwartzian transform</a>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>x <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;upjohn tehran hectors katy&#39;</span>
</span></span><span style="display:flex;"><span>y <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;1D0HG6JFO9P5ICKAM87B24NL3E&#39;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>print(<span style="color:#e6db74">&#39;&#39;</span><span style="color:#f92672">.</span>join(x[i] <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> sorted(range(len(x)), key<span style="color:#f92672">=</span><span style="color:#66d9ef">lambda</span> p: y[p])))
</span></span></code></pre></div><p>Obfuscation consists mostly of using silly machinations to construct the string we use to sort the anagram.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>print(<span style="color:#e6db74">&#39;&#39;</span><span style="color:#f92672">.</span>join(<span style="color:#e6db74">&#39;&#39;&#39;upjohn tehran hectors katy&#39;&#39;&#39;</span>[_]<span style="color:#66d9ef">for</span> _ <span style="color:#f92672">in</span> sorted(range
</span></span><span style="display:flex;"><span>(<span style="color:#ae81ff">26</span>),key<span style="color:#f92672">=</span><span style="color:#66d9ef">lambda</span> p:(hex(<span style="color:#ae81ff">29</span>)[<span style="color:#ae81ff">2</span>:]<span style="color:#f92672">.</span>upper()<span style="color:#f92672">+</span>str(<span style="color:#ae81ff">3</span><span style="color:#f92672">*</span><span style="color:#ae81ff">3</span><span style="color:#f92672">*</span><span style="color:#ae81ff">3</span><span style="color:#f92672">*</span><span style="color:#ae81ff">3</span><span style="color:#f92672">-</span><span style="color:#ae81ff">3</span><span style="color:#f92672">**</span><span style="color:#ae81ff">4</span>)<span style="color:#f92672">+</span><span style="color:#e6db74">&#39;HG&#39;</span><span style="color:#f92672">+</span>str(sum(
</span></span><span style="display:flex;"><span>range(<span style="color:#ae81ff">4</span>)))<span style="color:#f92672">+</span><span style="color:#e6db74">&#39;JFO&#39;</span><span style="color:#f92672">+</span>str((<span style="color:#ae81ff">1</span><span style="color:#f92672">+</span><span style="color:#ae81ff">2</span>)<span style="color:#f92672">**</span>(<span style="color:#ae81ff">1</span><span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>))<span style="color:#f92672">+</span><span style="color:#e6db74">&#39;P&#39;</span><span style="color:#f92672">+</span>str(<span style="color:#ae81ff">35</span><span style="color:#f92672">/</span><span style="color:#ae81ff">7</span>)[:<span style="color:#ae81ff">1</span>]<span style="color:#f92672">+</span><span style="color:#e6db74">&#39;i.c.k.&#39;</span><span style="color:#f92672">.</span>replace(
</span></span><span style="display:flex;"><span><span style="color:#e6db74">&#39;.&#39;</span>,<span style="color:#e6db74">&#39;&#39;</span>)<span style="color:#f92672">.</span>upper()<span style="color:#f92672">+</span><span style="color:#e6db74">&#39;AM&#39;</span><span style="color:#f92672">+</span>str(<span style="color:#ae81ff">3</span><span style="color:#f92672">**</span><span style="color:#ae81ff">2</span><span style="color:#f92672">*</span>sum(range(<span style="color:#ae81ff">5</span>))<span style="color:#f92672">-</span><span style="color:#ae81ff">3</span>)<span style="color:#f92672">+</span>hex(<span style="color:#ae81ff">0o5444</span>)[<span style="color:#ae81ff">2</span>:]<span style="color:#f92672">.</span>replace
</span></span><span style="display:flex;"><span>(<span style="color:#f92672">*</span><span style="color:#e6db74">&#39;</span><span style="color:#ae81ff">\x62</span><span style="color:#e6db74">|</span><span style="color:#ae81ff">\x42</span><span style="color:#e6db74">&#39;</span><span style="color:#f92672">.</span>split(<span style="color:#e6db74">&#39;|&#39;</span>))<span style="color:#f92672">+</span><span style="color:#e6db74">&#39;NL&#39;</span><span style="color:#f92672">+</span>hex(<span style="color:#ae81ff">0o076</span>)<span style="color:#f92672">.</span>split(<span style="color:#e6db74">&#39;x&#39;</span>)[<span style="color:#ae81ff">1</span>]<span style="color:#f92672">.</span>upper())[p])))
</span></span></code></pre></div>]]></content:encoded>
    </item>
    
    <item>
      <title>🐪 Reformed JAPHs: Alphabetic Indexing</title>
      <link>https://ryanjoneil.github.io/posts/2011-04-01-reformed-japhs-alphabetic-indexing/</link>
      <pubDate>Fri, 01 Apr 2011 00:00:00 +0000</pubDate>
      
      <guid>https://ryanjoneil.github.io/posts/2011-04-01-reformed-japhs-alphabetic-indexing/</guid>
      <description>Python obfuscation</description>
      <content:encoded><![CDATA[<p><em>Note: This post was edited for clarity.</em></p>
<p>Many years ago, I was a Perl programmer. Then one day I became disillusioned at the progress of Perl 6 and decided to <a href="https://www.python.org/dev/peps/pep-0020/">import this</a>.</p>
<p>This seems to be a fairly common story for Perl to Python converts. While I haven&rsquo;t looked back much, there are a number of things I really miss about <code>perl</code> <em>(lower case intentional)</em>. I miss having value types in a dynamic language, magical and ill-advised use of <a href="https://www.foo.be/docs/tpj/issues/vol3_1/tpj0301-0003.html">cryptocontext</a>, and sometimes even <a href="https://web.archive.org/web/20040712204117/https://perldesignpatterns.com/?PseudoHash">pseudohashes</a> because they were inexcusably weird. A language that supports so many ideas out of the box enables an extended learning curve that lasts for <a href="https://web.archive.org/web/20020607034341/https://silver.sucs.org/~manic/humour/languages/perlhacker.htm">many years</a>. &ldquo;Perl itself is the game.&rdquo;</p>
<p>Most of all I think I miss writing Perl <a href="https://www.perlmonks.org/?node=Perl%20Poetry">poetry</a> and <a href="https://en.wikipedia.org/wiki/Just_another_Perl_hacker">JAPHs</a>. Sadly, I didn&rsquo;t keep any of those I wrote, and I&rsquo;m not competent enough with the language anymore to write interesting ones. At the time I was intentionally distancing myself from a model that was largely implicit and based on archaic systems internals and moving to one that was (supposedly) explicit and simple.</p>
<p>After switching to Python as my primary language, I used the following email signature in a nod to this change in orientation <em>(intended for Python 2)</em>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>print <span style="color:#e6db74">&#39;just another python hacker&#39;</span>
</span></span></code></pre></div><p>Recently I&rsquo;ve been experimenting with writing JAPHs in Python. I think of these as &ldquo;reformed JAPHs.&rdquo; They accomplish the same purpose as programming exercises but in a more restricted context. In some ways they are more challenging. Creativity can be difficult in a narrowly defined landscape.</p>
<p>I have written a small series of reformed JAPHs which increase monotonically in complexity. Here is the first one, written in plain understandable Python 3.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> string
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>letters <span style="color:#f92672">=</span> string<span style="color:#f92672">.</span>ascii_lowercase <span style="color:#f92672">+</span> <span style="color:#e6db74">&#39; &#39;</span>
</span></span><span style="display:flex;"><span>indices <span style="color:#f92672">=</span> [
</span></span><span style="display:flex;"><span>     <span style="color:#ae81ff">9</span>, <span style="color:#ae81ff">20</span>, <span style="color:#ae81ff">18</span>, <span style="color:#ae81ff">19</span>, <span style="color:#ae81ff">26</span>,  <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">13</span>, <span style="color:#ae81ff">14</span>, <span style="color:#ae81ff">19</span>, <span style="color:#ae81ff">7</span>,  <span style="color:#ae81ff">4</span>, <span style="color:#ae81ff">17</span>, <span style="color:#ae81ff">26</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#ae81ff">15</span>, <span style="color:#ae81ff">24</span>, <span style="color:#ae81ff">19</span>,  <span style="color:#ae81ff">7</span>, <span style="color:#ae81ff">14</span>, <span style="color:#ae81ff">13</span>, <span style="color:#ae81ff">26</span>,  <span style="color:#ae81ff">7</span>,  <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">10</span>,  <span style="color:#ae81ff">4</span>, <span style="color:#ae81ff">17</span>
</span></span><span style="display:flex;"><span>]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>print(<span style="color:#e6db74">&#39;&#39;</span><span style="color:#f92672">.</span>join(letters[i] <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> indices))
</span></span></code></pre></div><p>This is fairly simple. Instead of explicitly embedding the string <code>'just another python hacker'</code> in the program, we assemble it using the index of its letters in the string <code>'abcdefghijklmnopqrstuvwxyz '</code>. We then obfuscate through a series of minor measures:</p>
<ul>
<li>Instead of calling the print function, we <code>import sys</code> and make a call to <code>sys.stdout.write</code>.</li>
<li>We assemble <code>string.lowercase + ' '</code> by joining together the character versions of its respective ordinal values (97 to 123 and 32).</li>
<li>We join together the integer indices using <code>'l'</code> and split that into a list.</li>
<li>We apply <code>'''</code> liberally and rely on the fact that <code>python</code> concatenates adjacent strings.</li>
</ul>
<p>Here&rsquo;s the obfuscated version:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>eval(<span style="color:#e6db74">&#34;__import__(&#39;&#39;&#39;</span><span style="color:#ae81ff">\x73</span><span style="color:#e6db74">&#39;&#39;&#39;&#39;&#39;&#39;</span><span style="color:#ae81ff">\x79</span><span style="color:#e6db74">&#39;&#39;&#39;&#39;&#39;&#39;</span><span style="color:#ae81ff">\x73</span><span style="color:#e6db74">&#39;&#39;&#39;).sTdOuT&#34;</span><span style="color:#f92672">.</span>lower()
</span></span><span style="display:flex;"><span>)<span style="color:#f92672">.</span>write(<span style="color:#e6db74">&#39;&#39;</span><span style="color:#f92672">.</span>join(map(<span style="color:#66d9ef">lambda</span> _:(list(map(chr,range(<span style="color:#ae81ff">97</span>,<span style="color:#ae81ff">123</span>)))<span style="color:#f92672">+</span>[chr(
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">32</span>)])[int(_)],(<span style="color:#e6db74">&#39;&#39;&#39;9l20l18l19&#39;&#39;&#39;&#39;&#39;&#39;l26l0l13l14l19l7l4l17l26l15&#39;&#39;&#39;</span>
</span></span><span style="display:flex;"><span><span style="color:#e6db74">&#39;&#39;&#39;l24l19l7l14l1&#39;&#39;&#39;&#39;&#39;&#39;3l26l7l0l2l10l4l17&#39;&#39;&#39;</span>)<span style="color:#f92672">.</span>split(<span style="color:#e6db74">&#39;l&#39;</span>)))<span style="color:#f92672">+</span><span style="color:#e6db74">&#39;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#39;</span>,)
</span></span></code></pre></div><p>We could certainly do more, but that&rsquo;s where I left this one. Stay tuned for the next JAPH.</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>🧐 Data Fitting 2 - Very, Very Simple Linear Regression in Python</title>
      <link>https://ryanjoneil.github.io/posts/2011-02-15-data-fitting-2-very-very-simple-linear-regression-in-python/</link>
      <pubDate>Tue, 15 Feb 2011 00:00:00 +0000</pubDate>
      
      <guid>https://ryanjoneil.github.io/posts/2011-02-15-data-fitting-2-very-very-simple-linear-regression-in-python/</guid>
      <description>Predict how much people like cats and dogs based on their ice cream preferences. Also, Python and numpy.</description>
      <content:encoded><![CDATA[<p>This post is based on a memo I sent to some former colleagues at the Post. I&rsquo;ve edited it for use here since it fits well as the second in a series on simple data fitting techniques. If you&rsquo;re among the many enlightened individuals already using regression analysis, then this post is probably not for you. If you aren&rsquo;t, then hopefully this provides everything you need to develop rudimentary predictive models that yield surprising levels of accuracy.</p>
<h2 id="data">Data</h2>
<p>For purposes of a simple working example, we have collected six records of input data over three dimensions with the goal of predicting two outputs. The input data are:</p>
<p>$$
\begin{align*}
x_1 &amp;= \text{How much a respondent likes vanilla [0-10]}\\
x_2 &amp;= \text{How much a respondent likes strawberry [0-10]}\\
x_3 &amp;= \text{How much a respondent likes chocolate [0-10]}
\end{align*}
$$</p>
<p>Output data consist of:</p>
<p>$$
\begin{align*}
b_1 &amp;= \text{How much a respondent likes dogs [0-10]}\\
b_2 &amp;= \text{How much a respondent likes cats [0-10]}
\end{align*}
$$</p>
<p>Below are anonymous data collected from a random sample of people.</p>
<table>
<thead>
<tr>
<th>respondent</th>
<th style="text-align:right">vanilla ❤️</th>
<th style="text-align:right">strawberry ❤️</th>
<th style="text-align:right">chocolate ❤️</th>
<th style="text-align:right">dog ❤️</th>
<th style="text-align:right">cat ❤️</th>
</tr>
</thead>
<tbody>
<tr>
<td>Alyssa P Hacker</td>
<td style="text-align:right">9</td>
<td style="text-align:right">4</td>
<td style="text-align:right">9</td>
<td style="text-align:right">9</td>
<td style="text-align:right">8</td>
</tr>
<tr>
<td>Ben Bitdiddle</td>
<td style="text-align:right">8</td>
<td style="text-align:right">6</td>
<td style="text-align:right">4</td>
<td style="text-align:right">10</td>
<td style="text-align:right">4</td>
</tr>
<tr>
<td>Cy D. Fect</td>
<td style="text-align:right">9</td>
<td style="text-align:right">4</td>
<td style="text-align:right">8</td>
<td style="text-align:right">2</td>
<td style="text-align:right">6</td>
</tr>
<tr>
<td>Eva Lu Ator</td>
<td style="text-align:right">3</td>
<td style="text-align:right">7</td>
<td style="text-align:right">9</td>
<td style="text-align:right">4</td>
<td style="text-align:right">6</td>
</tr>
<tr>
<td>Lem E. Tweakit</td>
<td style="text-align:right">6</td>
<td style="text-align:right">8</td>
<td style="text-align:right">5</td>
<td style="text-align:right">2</td>
<td style="text-align:right">5</td>
</tr>
<tr>
<td>Louis Reasoner</td>
<td style="text-align:right">4</td>
<td style="text-align:right">5</td>
<td style="text-align:right">3</td>
<td style="text-align:right">10</td>
<td style="text-align:right">3</td>
</tr>
</tbody>
</table>
<p>Our input is in three dimensions. Each output requires its own model, so we&rsquo;ll have one for dogs and one for cats. We&rsquo;re looking for functions, <code>dog(x)</code> and <code>cat(x)</code>, that can predict $b_1$ and $b_2$ based on given values of $x_1$, $x_2$, and $x_3$.</p>
<h2 id="model-1">Model 1</h2>
<p>For both models we want to find parameters that minimize their squared residuals (read: errors). There&rsquo;s a number of names for this. Optimization folks like to think of it as unconstrained quadratic optimization, but it&rsquo;s more common to call it least squares or linear regression. It&rsquo;s not necessary to entirely understand why for our purposes, but the function that minimizes these errors is:</p>
<p>$$\beta = ({A^t}A)^{-1}{A^t}b$$</p>
<p>This is implemented for you in the <code>numpy.linalg</code> Python package, which we&rsquo;ll use for examples. Much more information than you probably want can be found <a href="http://en.wikipedia.org/wiki/Least_squares">here</a>.</p>
<p>Below is a first stab at a Python version. It runs least squares against our input and output data exactly as they are. You can see the matrix $A$ and outputs $b_1$ and $b_2$ (dog and cat love, respectively) are represented just as they are in the table.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># Version 1: No offset, no squared inputs</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> numpy
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>A <span style="color:#f92672">=</span> numpy<span style="color:#f92672">.</span>vstack([
</span></span><span style="display:flex;"><span>    [<span style="color:#ae81ff">9</span>, <span style="color:#ae81ff">4</span>, <span style="color:#ae81ff">9</span>],
</span></span><span style="display:flex;"><span>    [<span style="color:#ae81ff">8</span>, <span style="color:#ae81ff">6</span>, <span style="color:#ae81ff">4</span>],
</span></span><span style="display:flex;"><span>    [<span style="color:#ae81ff">9</span>, <span style="color:#ae81ff">4</span>, <span style="color:#ae81ff">8</span>],
</span></span><span style="display:flex;"><span>    [<span style="color:#ae81ff">3</span>, <span style="color:#ae81ff">7</span>, <span style="color:#ae81ff">9</span>],
</span></span><span style="display:flex;"><span>    [<span style="color:#ae81ff">6</span>, <span style="color:#ae81ff">8</span>, <span style="color:#ae81ff">5</span>],
</span></span><span style="display:flex;"><span>    [<span style="color:#ae81ff">4</span>, <span style="color:#ae81ff">5</span>, <span style="color:#ae81ff">3</span>]
</span></span><span style="display:flex;"><span>])
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>b1 <span style="color:#f92672">=</span> numpy<span style="color:#f92672">.</span>array([<span style="color:#ae81ff">9</span>, <span style="color:#ae81ff">10</span>, <span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">4</span>, <span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">10</span>])
</span></span><span style="display:flex;"><span>b2 <span style="color:#f92672">=</span> numpy<span style="color:#f92672">.</span>array([<span style="color:#ae81ff">9</span>, <span style="color:#ae81ff">4</span>, <span style="color:#ae81ff">6</span>, <span style="color:#ae81ff">6</span>, <span style="color:#ae81ff">5</span>, <span style="color:#ae81ff">3</span>])
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>print(<span style="color:#e6db74">&#39;dog ❤️:&#39;</span>, numpy<span style="color:#f92672">.</span>linalg<span style="color:#f92672">.</span>lstsq(A, b1, rcond<span style="color:#f92672">=</span><span style="color:#66d9ef">None</span>)[<span style="color:#ae81ff">0</span>])
</span></span><span style="display:flex;"><span>print(<span style="color:#e6db74">&#39;cat ❤️:&#39;</span>, numpy<span style="color:#f92672">.</span>linalg<span style="color:#f92672">.</span>lstsq(A, b2, rcond<span style="color:#f92672">=</span><span style="color:#66d9ef">None</span>)[<span style="color:#ae81ff">0</span>])
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Output:</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># dog ❤️: [0.72548294      0.53045642     -0.29952361]</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># cat ❤️: [2.36110929e-01  2.61934385e-05  6.26892476e-01]</span>
</span></span></code></pre></div><p>The resulting model is:</p>
<pre tabindex="0"><code>dog(x) = 0.72548294 * x1 + 0.53045642 * x2 - 0.29952361 * x3
cat(x) = 2.36110929e-01 * x1 + 2.61934385e-05 * x2 + 6.26892476e-01 * x3
</code></pre><p>The coefficients before our variables correspond to beta in the formula above. Errors between observed and predicted data, shown below, are calculated and summed. For these six records, <code>dog(x)</code> has a total error of 20.76 and <code>cat(x)</code> has 3.74. Not great.</p>
<table>
<thead>
<tr>
<th>respondent</th>
<th style="text-align:right">predicted b1</th>
<th style="text-align:right">b1 error</th>
<th style="text-align:right">predicted b2</th>
<th style="text-align:right">b2 error</th>
</tr>
</thead>
<tbody>
<tr>
<td>Alyssa P Hacker</td>
<td style="text-align:right">5.96</td>
<td style="text-align:right">3.04</td>
<td style="text-align:right">7.77</td>
<td style="text-align:right">1.23</td>
</tr>
<tr>
<td>Ben Bitdiddle</td>
<td style="text-align:right">7.79</td>
<td style="text-align:right">2.21</td>
<td style="text-align:right">4.40</td>
<td style="text-align:right">0.40</td>
</tr>
<tr>
<td>Cy D. Fect</td>
<td style="text-align:right">6.25</td>
<td style="text-align:right">4.25</td>
<td style="text-align:right">7.14</td>
<td style="text-align:right">1.14</td>
</tr>
<tr>
<td>Eva Lu Ator</td>
<td style="text-align:right">3.19</td>
<td style="text-align:right">0.81</td>
<td style="text-align:right">6.35</td>
<td style="text-align:right">0.35</td>
</tr>
<tr>
<td>Lem E. Tweakit</td>
<td style="text-align:right">7.10</td>
<td style="text-align:right">5.10</td>
<td style="text-align:right">4.55</td>
<td style="text-align:right">0.45</td>
</tr>
<tr>
<td>Louis Reasoner</td>
<td style="text-align:right">4.66</td>
<td style="text-align:right">5.34</td>
<td style="text-align:right">2.83</td>
<td style="text-align:right">0.17</td>
</tr>
<tr>
<td>Total error:</td>
<td style="text-align:right"></td>
<td style="text-align:right">20.76</td>
<td style="text-align:right"></td>
<td style="text-align:right">3.74</td>
</tr>
</tbody>
</table>
<h2 id="model-2">Model 2</h2>
<p>One problem with this model is that <code>dog(x)</code> and <code>cat(x)</code> are forced to pass through the origin. <em>(Why is that?)</em> We can improve it somewhat if we add an offset. This amounts to prepending 1 to every row in $A$ and adding a constant to the resulting functions. You can see the very slight difference between the code for this model and that of the previous:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># Version 2: Offset, no squared inputs</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> numpy
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>A <span style="color:#f92672">=</span> numpy<span style="color:#f92672">.</span>vstack([
</span></span><span style="display:flex;"><span>    [<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">9</span>, <span style="color:#ae81ff">4</span>, <span style="color:#ae81ff">9</span>],
</span></span><span style="display:flex;"><span>    [<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">8</span>, <span style="color:#ae81ff">6</span>, <span style="color:#ae81ff">4</span>],
</span></span><span style="display:flex;"><span>    [<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">9</span>, <span style="color:#ae81ff">4</span>, <span style="color:#ae81ff">8</span>],
</span></span><span style="display:flex;"><span>    [<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">3</span>, <span style="color:#ae81ff">7</span>, <span style="color:#ae81ff">9</span>],
</span></span><span style="display:flex;"><span>    [<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">6</span>, <span style="color:#ae81ff">8</span>, <span style="color:#ae81ff">5</span>],
</span></span><span style="display:flex;"><span>    [<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">4</span>, <span style="color:#ae81ff">5</span>, <span style="color:#ae81ff">3</span>]
</span></span><span style="display:flex;"><span>])
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>print(<span style="color:#e6db74">&#39;dog ❤️:&#39;</span>, numpy<span style="color:#f92672">.</span>linalg<span style="color:#f92672">.</span>lstsq(A, b1, rcond<span style="color:#f92672">=</span><span style="color:#66d9ef">None</span>)[<span style="color:#ae81ff">0</span>])
</span></span><span style="display:flex;"><span>print(<span style="color:#e6db74">&#39;cat ❤️:&#39;</span>, numpy<span style="color:#f92672">.</span>linalg<span style="color:#f92672">.</span>lstsq(A, b2, rcond<span style="color:#f92672">=</span><span style="color:#66d9ef">None</span>)[<span style="color:#ae81ff">0</span>])
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Output:</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># dog ❤️: [20.92975427  -0.27831197  -1.43135684  -0.76469017]</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># cat ❤️: [-0.31744124   0.25133547   0.02978098   0.63394765]</span>
</span></span></code></pre></div><p>This yields the seconds version of our models:</p>
<pre tabindex="0"><code>dog(x) = 20.92975427 - 0.27831197 * x1 - 1.43135684 * x2 - 0.76469017 * x3
cat(x) = -0.31744124 + 0.25133547 * x1 + 0.02978098 * x2 + 0.63394765 * x3
</code></pre><p>These models provide errors of 13.87 and 3.79.  A little better on the dog side, but still not quite usable.</p>
<table>
<thead>
<tr>
<th>respondent</th>
<th style="text-align:right">predicted b1</th>
<th style="text-align:right">b1 error</th>
<th style="text-align:right">predicted b2</th>
<th style="text-align:right">b2 error</th>
</tr>
</thead>
<tbody>
<tr>
<td>Alyssa P Hacker</td>
<td style="text-align:right">5.82</td>
<td style="text-align:right">3.18</td>
<td style="text-align:right">7.77</td>
<td style="text-align:right">1.23</td>
</tr>
<tr>
<td>Ben Bitdiddle</td>
<td style="text-align:right">7.06</td>
<td style="text-align:right">2.94</td>
<td style="text-align:right">4.41</td>
<td style="text-align:right">0.41</td>
</tr>
<tr>
<td>Cy D. Fect</td>
<td style="text-align:right">6.58</td>
<td style="text-align:right">4.58</td>
<td style="text-align:right">7.14</td>
<td style="text-align:right">1.14</td>
</tr>
<tr>
<td>Eva Lu Ator</td>
<td style="text-align:right">3.19</td>
<td style="text-align:right">0.81</td>
<td style="text-align:right">6.35</td>
<td style="text-align:right">0.35</td>
</tr>
<tr>
<td>Lem E. Tweakit</td>
<td style="text-align:right">3.99</td>
<td style="text-align:right">1.99</td>
<td style="text-align:right">4.60</td>
<td style="text-align:right">0.40</td>
</tr>
<tr>
<td>Louis Reasoner</td>
<td style="text-align:right">10.37</td>
<td style="text-align:right">0.37</td>
<td style="text-align:right">2.74</td>
<td style="text-align:right">0.26</td>
</tr>
<tr>
<td>Total error:</td>
<td style="text-align:right"></td>
<td style="text-align:right">13.87</td>
<td style="text-align:right"></td>
<td style="text-align:right">3.79</td>
</tr>
</tbody>
</table>
<h2 id="model-3">Model 3</h2>
<p>The problem is that <code>dog(x)</code> and <code>cat(x)</code> are linear functions. Most observed data don&rsquo;t conform to straight lines. Take a moment and draw the line $f(x) = x$ and the curve $f(x) = x^2$. The former makes a poor approximation of the latter.</p>
<p>Most of the time, people just use squares of the input data to add curvature to their models. We do this in our next version of the code by just adding squares of the input row values to our $A$ matrix. Everything else is the same. (In reality, you can add any function of the input data you feel best models the data, if you understand it well enough.)</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># Version 3: Offset with squared inputs</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> numpy
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>A <span style="color:#f92672">=</span> numpy<span style="color:#f92672">.</span>vstack([
</span></span><span style="display:flex;"><span>    [<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">9</span>, <span style="color:#ae81ff">9</span><span style="color:#f92672">**</span><span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">4</span>, <span style="color:#ae81ff">4</span><span style="color:#f92672">**</span><span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">9</span>, <span style="color:#ae81ff">9</span><span style="color:#f92672">**</span><span style="color:#ae81ff">2</span>],
</span></span><span style="display:flex;"><span>    [<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">8</span>, <span style="color:#ae81ff">8</span><span style="color:#f92672">**</span><span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">6</span>, <span style="color:#ae81ff">6</span><span style="color:#f92672">**</span><span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">4</span>, <span style="color:#ae81ff">4</span><span style="color:#f92672">**</span><span style="color:#ae81ff">2</span>],
</span></span><span style="display:flex;"><span>    [<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">9</span>, <span style="color:#ae81ff">9</span><span style="color:#f92672">**</span><span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">4</span>, <span style="color:#ae81ff">4</span><span style="color:#f92672">**</span><span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">8</span>, <span style="color:#ae81ff">8</span><span style="color:#f92672">**</span><span style="color:#ae81ff">2</span>],
</span></span><span style="display:flex;"><span>    [<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">3</span>, <span style="color:#ae81ff">3</span><span style="color:#f92672">**</span><span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">7</span>, <span style="color:#ae81ff">7</span><span style="color:#f92672">**</span><span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">9</span>, <span style="color:#ae81ff">9</span><span style="color:#f92672">**</span><span style="color:#ae81ff">2</span>],
</span></span><span style="display:flex;"><span>    [<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">6</span>, <span style="color:#ae81ff">6</span><span style="color:#f92672">**</span><span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">8</span>, <span style="color:#ae81ff">8</span><span style="color:#f92672">**</span><span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">5</span>, <span style="color:#ae81ff">5</span><span style="color:#f92672">**</span><span style="color:#ae81ff">2</span>],
</span></span><span style="display:flex;"><span>    [<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">4</span>, <span style="color:#ae81ff">4</span><span style="color:#f92672">**</span><span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">5</span>, <span style="color:#ae81ff">5</span><span style="color:#f92672">**</span><span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">3</span>, <span style="color:#ae81ff">3</span><span style="color:#f92672">**</span><span style="color:#ae81ff">2</span>]
</span></span><span style="display:flex;"><span>])
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>b1 <span style="color:#f92672">=</span> numpy<span style="color:#f92672">.</span>array([<span style="color:#ae81ff">9</span>, <span style="color:#ae81ff">10</span>, <span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">4</span>, <span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">10</span>])
</span></span><span style="display:flex;"><span>b2 <span style="color:#f92672">=</span> numpy<span style="color:#f92672">.</span>array([<span style="color:#ae81ff">9</span>, <span style="color:#ae81ff">4</span>, <span style="color:#ae81ff">6</span>, <span style="color:#ae81ff">6</span>, <span style="color:#ae81ff">5</span>, <span style="color:#ae81ff">3</span>])
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>print(<span style="color:#e6db74">&#39;dog ❤️:&#39;</span>, numpy<span style="color:#f92672">.</span>linalg<span style="color:#f92672">.</span>lstsq(A, b1, rcond<span style="color:#f92672">=</span><span style="color:#66d9ef">None</span>)[<span style="color:#ae81ff">0</span>])
</span></span><span style="display:flex;"><span>print(<span style="color:#e6db74">&#39;cat ❤️:&#39;</span>, numpy<span style="color:#f92672">.</span>linalg<span style="color:#f92672">.</span>lstsq(A, b2, rcond<span style="color:#f92672">=</span><span style="color:#66d9ef">None</span>)[<span style="color:#ae81ff">0</span>])
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># dog ❤️: [1.29368307  7.03633306  -0.44795498  9.98093332</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#  -0.75689575  -19.00757486  1.52985734]</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># cat ❤️: [0.47945896  5.30866067  -0.39644128 -1.28704188</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#   0.12634295   -4.32392606  0.43081918]</span>
</span></span></code></pre></div><p>This gives us our final version of the model:</p>
<pre tabindex="0"><code>dog(x) = 1.29368307 + 7.03633306 * x1 - 0.44795498 * x1**2 + 9.98093332 * x2 - 0.75689575 * x2**2 - 19.00757486 * x3 + 1.52985734 * x3**2
cat(x) = 0.47945896 + 5.30866067 * x1 - 0.39644128 * x1**2 - 1.28704188 * x2 + 0.12634295 * x2**2 - 4.32392606 * x3 + 0.43081918 * x3**2
</code></pre><p>Adding curvature to our model eliminates all perceived error, at least within 1e-16. This may seem unbelievable, but when you consider that we only have six input records, it isn&rsquo;t really.</p>
<table>
<thead>
<tr>
<th>respondent</th>
<th style="text-align:right">predicted b1</th>
<th style="text-align:right">b1 error</th>
<th style="text-align:right">predicted b2</th>
<th style="text-align:right">b2 error</th>
</tr>
</thead>
<tbody>
<tr>
<td>Alyssa P Hacker</td>
<td style="text-align:right">9</td>
<td style="text-align:right">0</td>
<td style="text-align:right">9</td>
<td style="text-align:right">0</td>
</tr>
<tr>
<td>Ben Bitdiddle</td>
<td style="text-align:right">10</td>
<td style="text-align:right">0</td>
<td style="text-align:right">4</td>
<td style="text-align:right">0</td>
</tr>
<tr>
<td>Cy D. Fect</td>
<td style="text-align:right">2</td>
<td style="text-align:right">0</td>
<td style="text-align:right">6</td>
<td style="text-align:right">0</td>
</tr>
<tr>
<td>Eva Lu Ator</td>
<td style="text-align:right">4</td>
<td style="text-align:right">0</td>
<td style="text-align:right">6</td>
<td style="text-align:right">0</td>
</tr>
<tr>
<td>Lem E. Tweakit</td>
<td style="text-align:right">2</td>
<td style="text-align:right">0</td>
<td style="text-align:right">5</td>
<td style="text-align:right">0</td>
</tr>
<tr>
<td>Louis Reasoner</td>
<td style="text-align:right">10</td>
<td style="text-align:right">0</td>
<td style="text-align:right">3</td>
<td style="text-align:right">0</td>
</tr>
<tr>
<td>Total error:</td>
<td style="text-align:right"></td>
<td style="text-align:right">0</td>
<td style="text-align:right"></td>
<td style="text-align:right">0</td>
</tr>
</tbody>
</table>
<p>It should be fairly obvious how one can take this and extrapolate to much larger models. I hope this is useful and that least squares becomes an important part of your lives.</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>🗳 Off the Cuff Voter Fraud Detection</title>
      <link>https://ryanjoneil.github.io/posts/2010-11-30-off-the-cuff-voter-fraud-detection/</link>
      <pubDate>Tue, 30 Nov 2010 00:00:00 +0000</pubDate>
      
      <guid>https://ryanjoneil.github.io/posts/2010-11-30-off-the-cuff-voter-fraud-detection/</guid>
      <description>Using the exponential distribution to interpret votes in a web survey</description>
      <content:encoded><![CDATA[<p>Consider this scenario: You run a contest that accepts votes from the general Internet population. In order to encourage user engagement, you record any and all votes into a database over several days, storing nothing more than the competitor voted for, when each vote is cast, and a cookie set on the voter&rsquo;s computer along with their apparent IP addresses. If a voter already has a recorded cookie set they are denied subsequent votes. This way you can avoid requiring site registration, a huge turnoff for your users. Simple enough.</p>
<p>Unfortunately, some of the competitors are wily and attached to the idea of winning. They go so far as programming or hiring bots to cast thousands of votes for them. Your manager wants to know which votes are real and which ones are fake Right Now. Given very limited time, and ignoring actions that you <em>could</em> have taken to avoid the problem, how can you tell apart sets of good votes from those that shouldn&rsquo;t be counted?</p>
<p>One quick-and-dirty option involves comparing histograms of <a href="http://www.ehow.com/how_5417319_calculate-interarrival-time.html">interarrival times</a> for sets of votes. Say you&rsquo;re concerned that all the votes during a particular period of time or from a given IP address might be fraudulent. Put all the vote times you&rsquo;re concerned about into a list, sort them, and compute their differences:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># times is a list of datetime instances from vote records</span>
</span></span><span style="display:flex;"><span>times<span style="color:#f92672">.</span>sort(reversed<span style="color:#f92672">=</span><span style="color:#66d9ef">True</span>)
</span></span><span style="display:flex;"><span>interarrivals <span style="color:#f92672">=</span> [y<span style="color:#f92672">-</span>x <span style="color:#66d9ef">for</span> x, y <span style="color:#f92672">in</span> zip(times, times[<span style="color:#ae81ff">1</span>:]]
</span></span></code></pre></div><p>Now use matplotlib to <a href="https://matplotlib.org/2.0.2/users/pyplot_tutorial.html#working-with-text">display a histogram</a> of these. Votes that occur naturally are likely to resemble an <a href="http://en.wikipedia.org/wiki/Exponential_distribution">exponential distribution</a> in their interarrival times. For instance, here are interarrival times for all votes received in a contest:</p>
<p><img loading="lazy" src="/files/2010-11-30-off-the-cuff-voter-fraud-detection/all-votes.png" alt="Interarrival times for all submissions"  />
</p>
<p>This subset of votes is clearly fraudulent, due to the near determinism of their interarrival times. This is most likely caused by the voting bot not taking random sleep intervals during voting. It casts a vote, receives a response, clears its cookies, and repeats:</p>
<p><img loading="lazy" src="/files/2010-11-30-off-the-cuff-voter-fraud-detection/fraud-plot.png" alt="Interarrival times for clearly fraudulent votes"  />
</p>
<p>These votes, on the other hand, are most likely legitimate. They exhibit a nice <!-- raw HTML omitted -->Erlang<!-- raw HTML omitted --> shape and appear to have natural interarrival times that one would expect:</p>
<p><img loading="lazy" src="/files/2010-11-30-off-the-cuff-voter-fraud-detection/not-fraud.png" alt="Proper-looking interarrival times"  />
</p>
<p>Of course this method is woefully inadequate for rigorous detection of voting fraud. Ideally one would find a method to compute the probability that a set of votes is generated by a bot. This is enough to inform quick, ad hoc decisions though.</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>🧐 Data Fitting 1 - Linear Data Fitting</title>
      <link>https://ryanjoneil.github.io/posts/2010-11-23-data-fitting-1-linear-data-fitting/</link>
      <pubDate>Tue, 23 Nov 2010 00:00:00 +0000</pubDate>
      
      <guid>https://ryanjoneil.github.io/posts/2010-11-23-data-fitting-1-linear-data-fitting/</guid>
      <description>An introduction to data fitting and classification using linear optimization in Python</description>
      <content:encoded><![CDATA[<p><em>Note: This post was updated to work with Python 3 and <a href="https://github.com/scipopt/PySCIPOpt">PySCIPOpt</a>. The original version used Python 2 and <a href="https://pythonhosted.org/python-zibopt/">python-zibopt</a>.</em></p>
<p>Data fitting is one of those tasks that everyone should have at least some exposure to. Certainly developers and analysts will benefit from a working knowledge of its fundamentals and their implementations. However, in my own reading I&rsquo;ve found it difficult to locate good examples that are simple enough to pick up quickly and come with accompanying source code.</p>
<p>This article commences an ongoing series introducing basic data fitting techniques. With any luck they won&rsquo;t be overly complex, while still being useful enough to get the point across with a real example and real data. We&rsquo;ll start with a binary classification problem: presented with a series of records, each containing a set number of input values describing it, determine whether or not each record exhibits some property.</p>
<h2 id="model">Model</h2>
<p>We&rsquo;ll use the <code>cancer1.dt</code> data from the <code>proben1</code> set of test cases, which you can download <a href="/files/2010-11-23-data-fitting-1-linear-data-fitting/cancer1.dt">here</a>. Each record starts with 9 data points containing physical characteristics of a tumor. The second to last data point contains 1 if a tumor is benign and 0 if it is malignant. We seek to find a linear function we can run on an arbitrary record that will return a value greater than zero if that record&rsquo;s tumor is predicted to be benign and less than zero if it is predicted to be malignant. We will train our linear model on the first 350 records, and test it for accuracy on the remaining rows.</p>
<p>This is similar to the data fitting problem found in <a href="https://www.thriftbooks.com/w/linear-programming-series-of-books-in-the-mathematical-sciences_vasek-chvatal/249798/#edition=2416723&amp;idiq=15706498">Chvatal</a>. Our inputs consist of a matrix of observed data, $A$, and a vector of classifications, $b$. In order to classify a record, we require another vector $x$ such that the dot product of $x$ and that record will be either greater or less than zero depending on its predicted classification.</p>
<p>A couple points to note before we start:</p>
<ul>
<li>
<p>Most observed data are noisy. This means it may be impossible to locate a hyperplane that cleanly separates given records of one type from another. In this case, we must resort to finding a function that minimizes our predictive error. For the purposes of this example, we&rsquo;ll minimize the sum of the absolute values of the observed and predicted values. That is, we seek $x$ such that we find $min \sum_i{|a_i^T x-b_i|}$.</p>
</li>
<li>
<p>The <a href="https://www.purplemath.com/modules/strtlneq.htm">slope-intercept</a> form of a line, $f(x)=m^T x+b$, contains an offset. It should be obvious that this is necessary in our model so that our function isn&rsquo;t required to pass through the origin. Thus, we&rsquo;ll be adding an extra variable with the coefficient of 1 to represent our offset value.</p>
</li>
<li>
<p>In order to model this, we use two linear constraints for each absolute value. We minimize the sum of these. Our Linear Programming model thus looks like:</p>
</li>
</ul>
<p>$$
\begin{align*}
\min\quad       &amp; z = x_0 + \sum_i{v_i}\\
\text{s.t.}\quad&amp; v_i \geq x_0 + a_i^\intercal x - 1    &amp;\quad\forall&amp;\quad\text{benign tumors}\\
&amp; v_i \geq 1 - x_0 - a_i^\intercal x    &amp;\quad\forall&amp;\quad\text{benign tumors}\\
&amp; v_i \geq x_0 + a_i^\intercal x - (-1) &amp;\quad\forall&amp;\quad\text{malignant tumors}\\
&amp; v_i \geq -1 - x_0 - a_i^\intercal x   &amp;\quad\forall&amp;\quad\text{malignant tumors}
\end{align*}
$$</p>
<h2 id="code">Code</h2>
<p>In order to do this in Python, we use <a href="https://www.scipopt.org/">SCIP</a> and <a href="https://soplex.zib.de/">SoPlex</a>. We start by setting constants for benign and malignant outputs and providing a function to read in the training and testing data sets.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># Preferred output values for tumor categories</span>
</span></span><span style="display:flex;"><span>BENIGN <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>MALIGNANT <span style="color:#f92672">=</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">read_proben1_cancer_data</span>(filename, train_size):
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#39;&#39;&#39;Loads a proben1 cancer file into train &amp; test sets&#39;&#39;&#39;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Number of input data points per record</span>
</span></span><span style="display:flex;"><span>    DATA_POINTS <span style="color:#f92672">=</span> <span style="color:#ae81ff">9</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    train_data <span style="color:#f92672">=</span> []
</span></span><span style="display:flex;"><span>    test_data <span style="color:#f92672">=</span> []
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">with</span> open(filename) <span style="color:#66d9ef">as</span> infile:
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># Read in the first train_size lines to a training data list, and the</span>
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># others to testing data. This allows us to test how general our model</span>
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># is on something other than the input data.</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">for</span> line <span style="color:#f92672">in</span> infile<span style="color:#f92672">.</span>readlines()[<span style="color:#ae81ff">7</span>:]: <span style="color:#75715e"># skip header</span>
</span></span><span style="display:flex;"><span>            line <span style="color:#f92672">=</span> line<span style="color:#f92672">.</span>split()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>            <span style="color:#75715e"># Records = offset (x0) + remaining data points</span>
</span></span><span style="display:flex;"><span>            input <span style="color:#f92672">=</span> [float(x) <span style="color:#66d9ef">for</span> x <span style="color:#f92672">in</span> line[:DATA_POINTS]]
</span></span><span style="display:flex;"><span>            output <span style="color:#f92672">=</span> BENIGN <span style="color:#66d9ef">if</span> line[<span style="color:#f92672">-</span><span style="color:#ae81ff">2</span>] <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;1&#39;</span> <span style="color:#66d9ef">else</span> MALIGNANT
</span></span><span style="display:flex;"><span>            record <span style="color:#f92672">=</span> {<span style="color:#e6db74">&#39;input&#39;</span>: input, <span style="color:#e6db74">&#39;output&#39;</span>: output}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>            <span style="color:#75715e"># Determine what data set to put this in</span>
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">if</span> len(train_data) <span style="color:#f92672">&gt;=</span> train_size:
</span></span><span style="display:flex;"><span>                test_data<span style="color:#f92672">.</span>append(record)
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">else</span>:
</span></span><span style="display:flex;"><span>                train_data<span style="color:#f92672">.</span>append(record)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> train_data, test_data
</span></span></code></pre></div><p>The next function implements the LP model described above using SoPlex and SCIP. It minimizes the sum of residuals for each training record. This amounts to summing the absolute value of the difference between predicted and observed output data. The following function takes in input and observed output data and returns a list of coefficients. Our resulting model consists of taking the <a href="https://en.wikipedia.org/wiki/Dot_product">dot product</a> of an input record and these coefficients. If the result is greater than or equal to zero, that record is predicted to be a benign tumor, otherwise it is predicted to be malignant.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">from</span> pyscipopt <span style="color:#f92672">import</span> Model
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">train_linear_model</span>(train_data):
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#39;&#39;&#39;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    Accepts a set of input training data with known output
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    values.  Returns a list of coefficients to apply to
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    arbitrary records for purposes of binary categorization.
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    &#39;&#39;&#39;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Make sure we have at least one training record.</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">assert</span> len(train_data) <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>    num_variables <span style="color:#f92672">=</span> len(train_data[<span style="color:#ae81ff">0</span>][<span style="color:#e6db74">&#39;input&#39;</span>])
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Variables are coefficients in front of the data points. It is important</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># that these be unrestricted in sign so they can take negative values.</span>
</span></span><span style="display:flex;"><span>    m <span style="color:#f92672">=</span> Model()
</span></span><span style="display:flex;"><span>    x <span style="color:#f92672">=</span> [m<span style="color:#f92672">.</span>addVar(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#39;x</span><span style="color:#e6db74">{</span>i<span style="color:#e6db74">}</span><span style="color:#e6db74">&#39;</span>, lb<span style="color:#f92672">=</span><span style="color:#66d9ef">None</span>) <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(num_variables)]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Residual for each data row</span>
</span></span><span style="display:flex;"><span>    residuals <span style="color:#f92672">=</span> [m<span style="color:#f92672">.</span>addVar(lb<span style="color:#f92672">=</span><span style="color:#66d9ef">None</span>, ub<span style="color:#f92672">=</span><span style="color:#66d9ef">None</span>) <span style="color:#66d9ef">for</span> _ <span style="color:#f92672">in</span> train_data]
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> r, d <span style="color:#f92672">in</span> zip(residuals, train_data):
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># r will be the absolute value of the difference between observed and</span>
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># predicted values. We can model absolute values such as r &gt;= |foo| as:</span>
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">#</span>
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">#   r &gt;=  foo</span>
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">#   r &gt;= -foo</span>
</span></span><span style="display:flex;"><span>        m<span style="color:#f92672">.</span>addCons(sum(x <span style="color:#f92672">*</span> y <span style="color:#66d9ef">for</span> x, y <span style="color:#f92672">in</span> zip(x, d[<span style="color:#e6db74">&#39;input&#39;</span>])) <span style="color:#f92672">+</span> r <span style="color:#f92672">&gt;=</span> d[<span style="color:#e6db74">&#39;output&#39;</span>])
</span></span><span style="display:flex;"><span>        m<span style="color:#f92672">.</span>addCons(sum(x <span style="color:#f92672">*</span> y <span style="color:#66d9ef">for</span> x, y <span style="color:#f92672">in</span> zip(x, d[<span style="color:#e6db74">&#39;input&#39;</span>])) <span style="color:#f92672">-</span> r <span style="color:#f92672">&lt;=</span> d[<span style="color:#e6db74">&#39;output&#39;</span>])
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Find and return coefficients that min sum of residuals.</span>
</span></span><span style="display:flex;"><span>    m<span style="color:#f92672">.</span>setObjective(sum(residuals))
</span></span><span style="display:flex;"><span>    m<span style="color:#f92672">.</span>setMinimize()
</span></span><span style="display:flex;"><span>    m<span style="color:#f92672">.</span>optimize()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    solution <span style="color:#f92672">=</span> m<span style="color:#f92672">.</span>getBestSol()
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> [solution[xi] <span style="color:#66d9ef">for</span> xi <span style="color:#f92672">in</span> x]
</span></span></code></pre></div><p>We also provide a convenience function for counting the number of correct predictions by our resulting model against either the test or training data sets.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">count_correct</span>(data_set, coefficients):
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#39;&#39;&#39;Returns the number of correct predictions.&#39;&#39;&#39;</span>
</span></span><span style="display:flex;"><span>    correct <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> d <span style="color:#f92672">in</span> data_set:
</span></span><span style="display:flex;"><span>        result <span style="color:#f92672">=</span> sum(x<span style="color:#f92672">*</span>y <span style="color:#66d9ef">for</span> x, y <span style="color:#f92672">in</span> zip(coefficients, d[<span style="color:#e6db74">&#39;input&#39;</span>]))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># Do we predict the same as the output?</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> (result <span style="color:#f92672">&gt;=</span> <span style="color:#ae81ff">0</span>) <span style="color:#f92672">==</span> (d[<span style="color:#e6db74">&#39;output&#39;</span>] <span style="color:#f92672">&gt;=</span> <span style="color:#ae81ff">0</span>):
</span></span><span style="display:flex;"><span>            correct <span style="color:#f92672">+=</span> <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> correct
</span></span></code></pre></div><p>Finally we write a main method to read in the data, build our linear model, and test its efficacy.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">from</span> pprint <span style="color:#f92672">import</span> pprint
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> __name__ <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;__main__&#39;</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Specs for this input file</span>
</span></span><span style="display:flex;"><span>    INPUT_FILE_NAME <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;cancer1.dt&#39;</span>
</span></span><span style="display:flex;"><span>    TRAIN_SIZE <span style="color:#f92672">=</span> <span style="color:#ae81ff">350</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    train_data, test_data <span style="color:#f92672">=</span> read_proben1_cancer_data(
</span></span><span style="display:flex;"><span>        INPUT_FILE_NAME,
</span></span><span style="display:flex;"><span>        TRAIN_SIZE
</span></span><span style="display:flex;"><span>    )
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Add the offset variable to each of our data records</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> data_set <span style="color:#f92672">in</span> [train_data, test_data]:
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">for</span> row <span style="color:#f92672">in</span> data_set:
</span></span><span style="display:flex;"><span>            row[<span style="color:#e6db74">&#39;input&#39;</span>] <span style="color:#f92672">=</span> [<span style="color:#ae81ff">1</span>] <span style="color:#f92672">+</span> row[<span style="color:#e6db74">&#39;input&#39;</span>]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    coefficients <span style="color:#f92672">=</span> train_linear_model(train_data)
</span></span><span style="display:flex;"><span>    print(<span style="color:#e6db74">&#39;coefficients:&#39;</span>)
</span></span><span style="display:flex;"><span>    pprint(coefficients)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Print % of correct predictions for each data set</span>
</span></span><span style="display:flex;"><span>    correct <span style="color:#f92672">=</span> count_correct(train_data, coefficients)
</span></span><span style="display:flex;"><span>    print(
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#39;</span><span style="color:#e6db74">%s</span><span style="color:#e6db74"> / </span><span style="color:#e6db74">%s</span><span style="color:#e6db74"> = </span><span style="color:#e6db74">%.02f%%</span><span style="color:#e6db74"> correct on training set&#39;</span> <span style="color:#f92672">%</span> (
</span></span><span style="display:flex;"><span>            correct, len(train_data),
</span></span><span style="display:flex;"><span>            <span style="color:#ae81ff">100</span> <span style="color:#f92672">*</span> float(correct) <span style="color:#f92672">/</span> len(train_data)
</span></span><span style="display:flex;"><span>        )
</span></span><span style="display:flex;"><span>    )
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    correct <span style="color:#f92672">=</span> count_correct(test_data, coefficients)
</span></span><span style="display:flex;"><span>    print(
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#39;</span><span style="color:#e6db74">%s</span><span style="color:#e6db74"> / </span><span style="color:#e6db74">%s</span><span style="color:#e6db74"> = </span><span style="color:#e6db74">%.02f%%</span><span style="color:#e6db74"> correct on testing set&#39;</span> <span style="color:#f92672">%</span> (
</span></span><span style="display:flex;"><span>            correct, len(test_data),
</span></span><span style="display:flex;"><span>            <span style="color:#ae81ff">100</span> <span style="color:#f92672">*</span> float(correct) <span style="color:#f92672">/</span> len(test_data)
</span></span><span style="display:flex;"><span>        )
</span></span><span style="display:flex;"><span>    )
</span></span></code></pre></div><h2 id="results">Results</h2>
<p>The result of running this model against the <code>cancer1.dt</code> data set is:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-txt" data-lang="txt"><span style="display:flex;"><span>coefficients:
</span></span><span style="display:flex;"><span>[1.4072882449702786,
</span></span><span style="display:flex;"><span> -0.14014055927954652,
</span></span><span style="display:flex;"><span> -0.6239513714263405,
</span></span><span style="display:flex;"><span> -0.26727681774258882,
</span></span><span style="display:flex;"><span> 0.067107753841131157,
</span></span><span style="display:flex;"><span> -0.28300216102808429,
</span></span><span style="display:flex;"><span> -1.0355594670918404,
</span></span><span style="display:flex;"><span> -0.22774451038152174,
</span></span><span style="display:flex;"><span> -0.69871243677663608,
</span></span><span style="display:flex;"><span> -0.072575089848659444]
</span></span><span style="display:flex;"><span>328 / 350 = 93.71% correct on training set
</span></span><span style="display:flex;"><span>336 / 349 = 96.28% correct on testing set
</span></span></code></pre></div><p>The accuracy is pretty good here against the both the training and testing sets, so this particular model generalizes well.  This is about the simplest model we can implement for data fitting, and we&rsquo;ll get to more complicated ones later, but it&rsquo;s nice to see we can do so well so quickly.  The coefficients correspond to using a function of this form, rounding off to three decimal places:</p>
<p>$$
\begin{align*}
f(x) =\ &amp;1.407 - 0.140 x_1 - 0.624 x_2 - 0.267 x_3 + 0.067 x_4 - \\
&amp;0.283 x_5 - 1.037 x_6 - 0.228 x_7 - 0.699 x_8 - 0.073 x_9
\end{align*}
$$</p>
<h2 id="resources">Resources</h2>
<ul>
<li><a href="/files/2010-11-23-data-fitting-1-linear-data-fitting/cancer1.dt"><code>cancer1.dt</code></a> data file from <code>proben1</code></li>
<li>Full <a href="/files/2010-11-23-data-fitting-1-linear-data-fitting/fit-linear.py">source listing</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>🐍 Monte Carlo Simulation in Python</title>
      <link>https://ryanjoneil.github.io/posts/2009-10-08-monte-carlo-simulation-in-python/</link>
      <pubDate>Thu, 08 Oct 2009 00:00:00 +0000</pubDate>
      
      <guid>https://ryanjoneil.github.io/posts/2009-10-08-monte-carlo-simulation-in-python/</guid>
      <description>A quick introduction to writing and interpreting Monte Carlo simulations in Python</description>
      <content:encoded><![CDATA[<p><em>Note: This post was updated to work with Python 3.</em></p>
<p>One of the most useful tools one learns in an Operations Research curriculum is <a href="https://en.wikipedia.org/wiki/Monte_Carlo_method">Monte Carlo Simulation</a>. Its utility lies in its simplicity: one can learn vital information about nearly any process, be it deterministic or stochastic, without wading through the grunt work of finding an analytical solution. It can be used for off-the-cuff estimates or as a proper scientific tool. All one needs to know is how to simulate a given process and its appropriate probability distributions and parameters if that process is stochastic.</p>
<p>Here&rsquo;s how it works:</p>
<ul>
<li>Construct a simulation that, given input values, returns a value of interest. This could be a pure quantity, like time spent waiting for a bus, or a boolean indicating whether or not a particular event occurs.</li>
<li>Run the simulation a, usually large, number of times, each time with randomly generated input variables. Record its output values.</li>
<li>Compute sample mean and variance of the output values.</li>
</ul>
<p>In the case of time spent waiting for a bus, the sample mean and variance are estimators of mean and variance for one&rsquo;s wait time. In the boolean case, these represent probability that the given event will occur.</p>
<p>One can think of Monte Carlo Simulation as throwing darts. Say you want to find the area under a curve without integrating. All you must do is draw the curve on a wall and throw darts at it randomly. After you&rsquo;ve thrown enough darts, the area under the curve can be approximated using the percentage of darts that end up under the curve times the total area.</p>
<p>This technique is often performed using a spreadsheet, but that can be a bit clunky and may make more complex simulations difficult. I&rsquo;d like to spend a minute showing how it can be done in Python. Consider the following scenario:</p>
<p>Passengers for a train arrive according to a Poisson process with a mean of 100 per hour. The next train arrives exponentially with a rate of 5 per hour. How many passers will be aboard the train?</p>
<p>We can simulate this using the fact that a Poisson process can be represented as a string of events occurring with exponential inter-arrival times. We use the <code>sim()</code> function below to generate the number of passengers for random instances of the problem. We then compute sample mean and variance for these values.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> random
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>PASSENGERS <span style="color:#f92672">=</span> <span style="color:#ae81ff">100.0</span>
</span></span><span style="display:flex;"><span>TRAINS     <span style="color:#f92672">=</span>   <span style="color:#ae81ff">5.0</span>
</span></span><span style="display:flex;"><span>ITERATIONS <span style="color:#f92672">=</span> <span style="color:#ae81ff">10000</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">sim</span>():
</span></span><span style="display:flex;"><span>    passengers <span style="color:#f92672">=</span> <span style="color:#ae81ff">0.0</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Determine when the train arrives</span>
</span></span><span style="display:flex;"><span>    train <span style="color:#f92672">=</span> random<span style="color:#f92672">.</span>expovariate(TRAINS)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Count the number of passenger arrivals before the train</span>
</span></span><span style="display:flex;"><span>    now <span style="color:#f92672">=</span> <span style="color:#ae81ff">0.0</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">while</span> <span style="color:#66d9ef">True</span>:
</span></span><span style="display:flex;"><span>        now <span style="color:#f92672">+=</span> random<span style="color:#f92672">.</span>expovariate(PASSENGERS)
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> now <span style="color:#f92672">&gt;=</span> train:
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">break</span>
</span></span><span style="display:flex;"><span>        passengers <span style="color:#f92672">+=</span> <span style="color:#ae81ff">1.0</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> passengers
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> __name__ <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;__main__&#39;</span>:
</span></span><span style="display:flex;"><span>    output <span style="color:#f92672">=</span> [sim() <span style="color:#66d9ef">for</span> _ <span style="color:#f92672">in</span> range(ITERATIONS)]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    total <span style="color:#f92672">=</span> sum(output)
</span></span><span style="display:flex;"><span>    mean <span style="color:#f92672">=</span> total <span style="color:#f92672">/</span> len(output)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    sum_sqrs <span style="color:#f92672">=</span> sum(x<span style="color:#f92672">*</span>x <span style="color:#66d9ef">for</span> x <span style="color:#f92672">in</span> output)
</span></span><span style="display:flex;"><span>    variance <span style="color:#f92672">=</span> (sum_sqrs <span style="color:#f92672">-</span> total <span style="color:#f92672">*</span> mean) <span style="color:#f92672">/</span> (len(output) <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    print(<span style="color:#e6db74">&#39;E[X] = </span><span style="color:#e6db74">%.02f</span><span style="color:#e6db74">&#39;</span> <span style="color:#f92672">%</span> mean)
</span></span><span style="display:flex;"><span>    print(<span style="color:#e6db74">&#39;Var(X) = </span><span style="color:#e6db74">%.02f</span><span style="color:#e6db74">&#39;</span> <span style="color:#f92672">%</span> variance)
</span></span></code></pre></div>]]></content:encoded>
    </item>
    
  </channel>
</rss>
