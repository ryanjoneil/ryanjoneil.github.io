<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>obfuscation on adventures in optimization</title>
    <link>https://ryanjoneil.github.io/tags/obfuscation/</link>
    <description>Recent content in obfuscation on adventures in optimization</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Mon, 11 Apr 2011 00:00:00 +0000</lastBuildDate><atom:link href="https://ryanjoneil.github.io/tags/obfuscation/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>üê™ Reformed JAPHs: Rolling Effect</title>
      <link>https://ryanjoneil.github.io/posts/2011-04-11-reformed-japhs-rolling-effect/</link>
      <pubDate>Mon, 11 Apr 2011 00:00:00 +0000</pubDate>
      
      <guid>https://ryanjoneil.github.io/posts/2011-04-11-reformed-japhs-rolling-effect/</guid>
      <description>Python obfuscation with a cute visual effect</description>
      <content:encoded><![CDATA[<p><em>Note: This post was updated to work with Python 3.12. It may not work with different versions.</em></p>
<p>Here&rsquo;s a JAPH composed solely for effect. For each letter in <code>'just another python hacker'</code> it loops over each the characters <code>' abcdefghijklmnopqrstuvwxyz'</code>, printing each. Between characters it pauses for 0.05 seconds, backing up and moving on to the next if it hasn&rsquo;t reached the desired one yet. This achieves a sort of rolling effect by which the final string appears on our screen over time.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> string
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> sys
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> time
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>letters <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39; &#39;</span> <span style="color:#f92672">+</span> string<span style="color:#f92672">.</span>ascii_lowercase
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> l <span style="color:#f92672">in</span> <span style="color:#e6db74">&#39;just another python hacker&#39;</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> x <span style="color:#f92672">in</span> letters:
</span></span><span style="display:flex;"><span>        print(x, end<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;&#39;</span>)
</span></span><span style="display:flex;"><span>        sys<span style="color:#f92672">.</span>stdout<span style="color:#f92672">.</span>flush()
</span></span><span style="display:flex;"><span>        time<span style="color:#f92672">.</span>sleep(<span style="color:#ae81ff">0.05</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> x <span style="color:#f92672">==</span> l:
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">break</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">else</span>:
</span></span><span style="display:flex;"><span>            print(<span style="color:#e6db74">&#39;</span><span style="color:#ae81ff">\b</span><span style="color:#e6db74">&#39;</span>, end<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;&#39;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>print()
</span></span></code></pre></div><p>We locate and print each letter in the string with a list comprehension.  At the end we have an extra line of code (the eval statement) that gives us our newline.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>[[(<span style="color:#66d9ef">lambda</span> x,l:str(print(x,end<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;&#39;</span>))<span style="color:#f92672">+</span>str(__import__(print<span style="color:#f92672">.</span>
</span></span><span style="display:flex;"><span>__doc__[print<span style="color:#f92672">.</span>__doc__<span style="color:#f92672">.</span>index(<span style="color:#e6db74">&#39;stdout&#39;</span>) <span style="color:#f92672">-</span> <span style="color:#ae81ff">4</span>:print<span style="color:#f92672">.</span>__doc__<span style="color:#f92672">.</span>
</span></span><span style="display:flex;"><span>index(<span style="color:#e6db74">&#39;stdout&#39;</span>)<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>])<span style="color:#f92672">.</span>stdout<span style="color:#f92672">.</span>flush()) <span style="color:#f92672">+</span> str(__import__(<span style="color:#e6db74">&#39;&#39;</span><span style="color:#f92672">.</span>
</span></span><span style="display:flex;"><span>join(reversed(<span style="color:#e6db74">&#39;emit&#39;</span>)))<span style="color:#f92672">.</span>sleep(<span style="color:#ae81ff">0o5</span><span style="color:#f92672">*</span><span style="color:#ae81ff">1.01</span><span style="color:#f92672">/</span><span style="color:#ae81ff">0x64</span>))<span style="color:#f92672">+</span>str(print(
</span></span><span style="display:flex;"><span><span style="color:#e6db74">&#39;</span><span style="color:#ae81ff">\b</span><span style="color:#e6db74">&#39;</span>,end<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;</span><span style="color:#ae81ff">\x09</span><span style="color:#e6db74">&#39;</span><span style="color:#f92672">.</span>strip())<span style="color:#66d9ef">if</span> x<span style="color:#f92672">!=</span>l <span style="color:#66d9ef">else</span><span style="color:#e6db74">&#39;*&amp;#&#39;</span>))(x1,l1)<span style="color:#66d9ef">for</span> x1
</span></span><span style="display:flex;"><span><span style="color:#f92672">in</span>(<span style="color:#e6db74">&#39;</span><span style="color:#ae81ff">\x20</span><span style="color:#e6db74">&#39;</span><span style="color:#f92672">+</span>getattr(__import__(type(<span style="color:#e6db74">&#39;phear&#39;</span>)<span style="color:#f92672">.</span>__name__<span style="color:#f92672">+</span><span style="color:#e6db74">&#39;in&#39;</span>
</span></span><span style="display:flex;"><span><span style="color:#e6db74">&#39;g&#39;</span>),dir(__import__(type(<span style="color:#e6db74">&#39;snarf&#39;</span>)<span style="color:#f92672">.</span>__name__<span style="color:#f92672">+</span><span style="color:#e6db74">&#39;ing&#39;</span>))[<span style="color:#ae81ff">15</span>]))
</span></span><span style="display:flex;"><span>[:(<span style="color:#e6db74">&#39;</span><span style="color:#ae81ff">\x20</span><span style="color:#e6db74">&#39;</span><span style="color:#f92672">+</span>getattr(__import__(type(<span style="color:#e6db74">&#39;smear&#39;</span>)<span style="color:#f92672">.</span>__name__<span style="color:#f92672">+</span><span style="color:#e6db74">&#39;in&#39;</span>
</span></span><span style="display:flex;"><span><span style="color:#e6db74">&#39;g&#39;</span>),dir(__import__(type(<span style="color:#e6db74">&#39;slurp&#39;</span>)<span style="color:#f92672">.</span>__name__<span style="color:#f92672">+</span><span style="color:#e6db74">&#39;ing&#39;</span>))[<span style="color:#ae81ff">15</span>]))
</span></span><span style="display:flex;"><span><span style="color:#f92672">.</span>index(l1)<span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>]]<span style="color:#66d9ef">for</span> l1 <span style="color:#f92672">in</span><span style="color:#e6db74">&#39;&#39;&#39;just another python hacker&#39;&#39;&#39;</span>]
</span></span><span style="display:flex;"><span>eval(<span style="color:#e6db74">&#39;&#39;&#39;</span><span style="color:#ae81ff">\x20\x09</span><span style="color:#e6db74">eval(&#34;</span><span style="color:#ae81ff">\x20\x09</span><span style="color:#e6db74">eval(&#39;</span><span style="color:#ae81ff">\x20</span><span style="color:#e6db74"> print()&#39;)&#34;)&#39;&#39;&#39;</span>)
</span></span></code></pre></div>]]></content:encoded>
    </item>
    
    <item>
      <title>üê™ Reformed JAPHs: ROT13</title>
      <link>https://ryanjoneil.github.io/posts/2011-04-06-reformed-japhs-rot13/</link>
      <pubDate>Wed, 06 Apr 2011 00:00:00 +0000</pubDate>
      
      <guid>https://ryanjoneil.github.io/posts/2011-04-06-reformed-japhs-rot13/</guid>
      <description>Python obfuscation using ROT13 encoding</description>
      <content:encoded><![CDATA[<p><em>Note: This post was updated to work with Python 3.12. It may not work with different versions.</em></p>
<p>No series of JAPHs would be complete without <a href="https://en.wikipedia.org/wiki/ROT13">ROT13</a>. This is the example through which aspiring Perl programmers learn to use <code>tr</code> and its synonym <code>y</code>. In Perl the basic ROT13 JAPH starts as:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-perl" data-lang="perl"><span style="display:flex;"><span>$foo <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;whfg nabgure crey unpxre&#39;</span>;
</span></span><span style="display:flex;"><span>$foo <span style="color:#f92672">=~</span> y<span style="color:#e6db74">/a-z/</span>n<span style="color:#f92672">-</span>za<span style="color:#f92672">-</span><span style="color:#e6db74">m</span><span style="color:#960050;background-color:#1e0010">/;</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">print</span> $foo;
</span></span></code></pre></div><p>Python has nothing quite so elegant in its default namespace. However, this does give us the opportunity to explore a little used aspect of strings: the translate method. If we construct a dictionary of ordinals we can accomplish the same thing with a touch more effort.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> string
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>table <span style="color:#f92672">=</span> {
</span></span><span style="display:flex;"><span>    ord(x): ord(y) <span style="color:#66d9ef">for</span> x, y <span style="color:#f92672">in</span> zip(
</span></span><span style="display:flex;"><span>        string<span style="color:#f92672">.</span>ascii_lowercase,
</span></span><span style="display:flex;"><span>        string<span style="color:#f92672">.</span>ascii_lowercase[<span style="color:#ae81ff">13</span>:] <span style="color:#f92672">+</span> string<span style="color:#f92672">.</span>ascii_lowercase
</span></span><span style="display:flex;"><span>    )
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>print(<span style="color:#e6db74">&#39;whfg nabgure clguba unpxre&#39;</span><span style="color:#f92672">.</span>translate(table))
</span></span></code></pre></div><p>We obfuscate the construction of this translation dictionary and, for added measure, use <code>getattr</code> to find the <code>print</code> function off of <code>__builtins__</code>.  This will likely only work in Python 3.2, since the order of attributes on <code>__builtins__</code> matters.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>getattr(vars()[list(filter(<span style="color:#66d9ef">lambda</span> _:<span style="color:#e6db74">&#39;</span><span style="color:#ae81ff">\x5f\x62</span><span style="color:#e6db74">&#39;</span><span style="color:#f92672">in</span> _,dir
</span></span><span style="display:flex;"><span>()))[<span style="color:#ae81ff">0</span>]], dir(vars()[list(filter(<span style="color:#66d9ef">lambda</span> _:<span style="color:#e6db74">&#39;</span><span style="color:#ae81ff">\x5f\x62</span><span style="color:#e6db74">&#39;</span><span style="color:#f92672">in</span>
</span></span><span style="display:flex;"><span>_, dir()))[<span style="color:#ae81ff">0</span>]])[list(filter(<span style="color:#66d9ef">lambda</span> _:_ [<span style="color:#ae81ff">1</span>]<span style="color:#f92672">.</span>startswith(
</span></span><span style="display:flex;"><span><span style="color:#e6db74">&#39;</span><span style="color:#ae81ff">\x70\x72</span><span style="color:#e6db74">&#39;</span>),enumerate(dir(vars()[list(filter(<span style="color:#66d9ef">lambda</span> _:
</span></span><span style="display:flex;"><span><span style="color:#e6db74">&#39;</span><span style="color:#ae81ff">\x5f\x62</span><span style="color:#e6db74">&#39;</span><span style="color:#f92672">in</span> _,dir()))[<span style="color:#ae81ff">0</span>]]))))[<span style="color:#ae81ff">0</span>][<span style="color:#ae81ff">0</span>]])(getattr(<span style="color:#e6db74">&#39;whfg &#39;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">+</span><span style="color:#e6db74">&#39;&#39;&#39;nabgure clguba unpxre&#39;&#39;&#39;</span>, dir(<span style="color:#e6db74">&#39;0o52&#39;</span>)[<span style="color:#ae81ff">0o116</span>])({ _:
</span></span><span style="display:flex;"><span>(_<span style="color:#f92672">-</span><span style="color:#ae81ff">0o124</span>) <span style="color:#f92672">%</span><span style="color:#ae81ff">0o32</span> <span style="color:#f92672">+</span><span style="color:#ae81ff">0o141</span> <span style="color:#66d9ef">for</span> _ <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">0o141</span>, <span style="color:#ae81ff">0o173</span>)}))
</span></span></code></pre></div>]]></content:encoded>
    </item>
    
    <item>
      <title>üê™ Reformed JAPHs: Ridiculous Anagram</title>
      <link>https://ryanjoneil.github.io/posts/2011-04-03-reformed-japhs-ridiculous-anagram/</link>
      <pubDate>Sun, 03 Apr 2011 00:00:00 +0000</pubDate>
      
      <guid>https://ryanjoneil.github.io/posts/2011-04-03-reformed-japhs-ridiculous-anagram/</guid>
      <description>Python obfuscation using anagrams</description>
      <content:encoded><![CDATA[<p>Here&rsquo;s the second in my reformed JAPH series. It takes an anagram of <code>'just another python hacker'</code> and converts it prior to printing. It sorts the anagram by the indices of another string, in order of their associated characters. This is sort of like a pre-digested <a href="https://en.wikipedia.org/wiki/Schwartzian_transform">Schwartzian transform</a>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>x <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;upjohn tehran hectors katy&#39;</span>
</span></span><span style="display:flex;"><span>y <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;1D0HG6JFO9P5ICKAM87B24NL3E&#39;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>print(<span style="color:#e6db74">&#39;&#39;</span><span style="color:#f92672">.</span>join(x[i] <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> sorted(range(len(x)), key<span style="color:#f92672">=</span><span style="color:#66d9ef">lambda</span> p: y[p])))
</span></span></code></pre></div><p>Obfuscation consists mostly of using silly machinations to construct the string we use to sort the anagram.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>print(<span style="color:#e6db74">&#39;&#39;</span><span style="color:#f92672">.</span>join(<span style="color:#e6db74">&#39;&#39;&#39;upjohn tehran hectors katy&#39;&#39;&#39;</span>[_]<span style="color:#66d9ef">for</span> _ <span style="color:#f92672">in</span> sorted(range
</span></span><span style="display:flex;"><span>(<span style="color:#ae81ff">26</span>),key<span style="color:#f92672">=</span><span style="color:#66d9ef">lambda</span> p:(hex(<span style="color:#ae81ff">29</span>)[<span style="color:#ae81ff">2</span>:]<span style="color:#f92672">.</span>upper()<span style="color:#f92672">+</span>str(<span style="color:#ae81ff">3</span><span style="color:#f92672">*</span><span style="color:#ae81ff">3</span><span style="color:#f92672">*</span><span style="color:#ae81ff">3</span><span style="color:#f92672">*</span><span style="color:#ae81ff">3</span><span style="color:#f92672">-</span><span style="color:#ae81ff">3</span><span style="color:#f92672">**</span><span style="color:#ae81ff">4</span>)<span style="color:#f92672">+</span><span style="color:#e6db74">&#39;HG&#39;</span><span style="color:#f92672">+</span>str(sum(
</span></span><span style="display:flex;"><span>range(<span style="color:#ae81ff">4</span>)))<span style="color:#f92672">+</span><span style="color:#e6db74">&#39;JFO&#39;</span><span style="color:#f92672">+</span>str((<span style="color:#ae81ff">1</span><span style="color:#f92672">+</span><span style="color:#ae81ff">2</span>)<span style="color:#f92672">**</span>(<span style="color:#ae81ff">1</span><span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>))<span style="color:#f92672">+</span><span style="color:#e6db74">&#39;P&#39;</span><span style="color:#f92672">+</span>str(<span style="color:#ae81ff">35</span><span style="color:#f92672">/</span><span style="color:#ae81ff">7</span>)[:<span style="color:#ae81ff">1</span>]<span style="color:#f92672">+</span><span style="color:#e6db74">&#39;i.c.k.&#39;</span><span style="color:#f92672">.</span>replace(
</span></span><span style="display:flex;"><span><span style="color:#e6db74">&#39;.&#39;</span>,<span style="color:#e6db74">&#39;&#39;</span>)<span style="color:#f92672">.</span>upper()<span style="color:#f92672">+</span><span style="color:#e6db74">&#39;AM&#39;</span><span style="color:#f92672">+</span>str(<span style="color:#ae81ff">3</span><span style="color:#f92672">**</span><span style="color:#ae81ff">2</span><span style="color:#f92672">*</span>sum(range(<span style="color:#ae81ff">5</span>))<span style="color:#f92672">-</span><span style="color:#ae81ff">3</span>)<span style="color:#f92672">+</span>hex(<span style="color:#ae81ff">0o5444</span>)[<span style="color:#ae81ff">2</span>:]<span style="color:#f92672">.</span>replace
</span></span><span style="display:flex;"><span>(<span style="color:#f92672">*</span><span style="color:#e6db74">&#39;</span><span style="color:#ae81ff">\x62</span><span style="color:#e6db74">|</span><span style="color:#ae81ff">\x42</span><span style="color:#e6db74">&#39;</span><span style="color:#f92672">.</span>split(<span style="color:#e6db74">&#39;|&#39;</span>))<span style="color:#f92672">+</span><span style="color:#e6db74">&#39;NL&#39;</span><span style="color:#f92672">+</span>hex(<span style="color:#ae81ff">0o076</span>)<span style="color:#f92672">.</span>split(<span style="color:#e6db74">&#39;x&#39;</span>)[<span style="color:#ae81ff">1</span>]<span style="color:#f92672">.</span>upper())[p])))
</span></span></code></pre></div>]]></content:encoded>
    </item>
    
    <item>
      <title>üê™ Reformed JAPHs: Alphabetic Indexing</title>
      <link>https://ryanjoneil.github.io/posts/2011-04-01-reformed-japhs-alphabetic-indexing/</link>
      <pubDate>Fri, 01 Apr 2011 00:00:00 +0000</pubDate>
      
      <guid>https://ryanjoneil.github.io/posts/2011-04-01-reformed-japhs-alphabetic-indexing/</guid>
      <description>Python obfuscation</description>
      <content:encoded><![CDATA[<p><em>Note: This post was edited for clarity.</em></p>
<p>Many years ago, I was a Perl programmer. Then one day I became disillusioned at the progress of Perl 6 and decided to <a href="https://www.python.org/dev/peps/pep-0020/">import this</a>.</p>
<p>This seems to be a fairly common story for Perl to Python converts. While I haven&rsquo;t looked back much, there are a number of things I really miss about <code>perl</code> <em>(lower case intentional)</em>. I miss having value types in a dynamic language, magical and ill-advised use of <a href="https://www.foo.be/docs/tpj/issues/vol3_1/tpj0301-0003.html">cryptocontext</a>, and sometimes even <a href="https://web.archive.org/web/20040712204117/https://perldesignpatterns.com/?PseudoHash">pseudohashes</a> because they were inexcusably weird. A language that supports so many ideas out of the box enables an extended learning curve that lasts for <a href="https://web.archive.org/web/20020607034341/https://silver.sucs.org/~manic/humour/languages/perlhacker.htm">many years</a>. &ldquo;Perl itself is the game.&rdquo;</p>
<p>Most of all I think I miss writing Perl <a href="https://www.perlmonks.org/?node=Perl%20Poetry">poetry</a> and <a href="https://en.wikipedia.org/wiki/Just_another_Perl_hacker">JAPHs</a>. Sadly, I didn&rsquo;t keep any of those I wrote, and I&rsquo;m not competent enough with the language anymore to write interesting ones. At the time I was intentionally distancing myself from a model that was largely implicit and based on archaic systems internals and moving to one that was (supposedly) explicit and simple.</p>
<p>After switching to Python as my primary language, I used the following email signature in a nod to this change in orientation <em>(intended for Python 2)</em>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>print <span style="color:#e6db74">&#39;just another python hacker&#39;</span>
</span></span></code></pre></div><p>Recently I&rsquo;ve been experimenting with writing JAPHs in Python. I think of these as &ldquo;reformed JAPHs.&rdquo; They accomplish the same purpose as programming exercises but in a more restricted context. In some ways they are more challenging. Creativity can be difficult in a narrowly defined landscape.</p>
<p>I have written a small series of reformed JAPHs which increase monotonically in complexity. Here is the first one, written in plain understandable Python 3.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> string
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>letters <span style="color:#f92672">=</span> string<span style="color:#f92672">.</span>ascii_lowercase <span style="color:#f92672">+</span> <span style="color:#e6db74">&#39; &#39;</span>
</span></span><span style="display:flex;"><span>indices <span style="color:#f92672">=</span> [
</span></span><span style="display:flex;"><span>     <span style="color:#ae81ff">9</span>, <span style="color:#ae81ff">20</span>, <span style="color:#ae81ff">18</span>, <span style="color:#ae81ff">19</span>, <span style="color:#ae81ff">26</span>,  <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">13</span>, <span style="color:#ae81ff">14</span>, <span style="color:#ae81ff">19</span>, <span style="color:#ae81ff">7</span>,  <span style="color:#ae81ff">4</span>, <span style="color:#ae81ff">17</span>, <span style="color:#ae81ff">26</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#ae81ff">15</span>, <span style="color:#ae81ff">24</span>, <span style="color:#ae81ff">19</span>,  <span style="color:#ae81ff">7</span>, <span style="color:#ae81ff">14</span>, <span style="color:#ae81ff">13</span>, <span style="color:#ae81ff">26</span>,  <span style="color:#ae81ff">7</span>,  <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">10</span>,  <span style="color:#ae81ff">4</span>, <span style="color:#ae81ff">17</span>
</span></span><span style="display:flex;"><span>]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>print(<span style="color:#e6db74">&#39;&#39;</span><span style="color:#f92672">.</span>join(letters[i] <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> indices))
</span></span></code></pre></div><p>This is fairly simple. Instead of explicitly embedding the string <code>'just another python hacker'</code> in the program, we assemble it using the index of its letters in the string <code>'abcdefghijklmnopqrstuvwxyz '</code>. We then obfuscate through a series of minor measures:</p>
<ul>
<li>Instead of calling the print function, we <code>import sys</code> and make a call to <code>sys.stdout.write</code>.</li>
<li>We assemble <code>string.lowercase + ' '</code> by joining together the character versions of its respective ordinal values (97 to 123 and 32).</li>
<li>We join together the integer indices using <code>'l'</code> and split that into a list.</li>
<li>We apply <code>'''</code> liberally and rely on the fact that <code>python</code> concatenates adjacent strings.</li>
</ul>
<p>Here&rsquo;s the obfuscated version:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>eval(<span style="color:#e6db74">&#34;__import__(&#39;&#39;&#39;</span><span style="color:#ae81ff">\x73</span><span style="color:#e6db74">&#39;&#39;&#39;&#39;&#39;&#39;</span><span style="color:#ae81ff">\x79</span><span style="color:#e6db74">&#39;&#39;&#39;&#39;&#39;&#39;</span><span style="color:#ae81ff">\x73</span><span style="color:#e6db74">&#39;&#39;&#39;).sTdOuT&#34;</span><span style="color:#f92672">.</span>lower()
</span></span><span style="display:flex;"><span>)<span style="color:#f92672">.</span>write(<span style="color:#e6db74">&#39;&#39;</span><span style="color:#f92672">.</span>join(map(<span style="color:#66d9ef">lambda</span> _:(list(map(chr,range(<span style="color:#ae81ff">97</span>,<span style="color:#ae81ff">123</span>)))<span style="color:#f92672">+</span>[chr(
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">32</span>)])[int(_)],(<span style="color:#e6db74">&#39;&#39;&#39;9l20l18l19&#39;&#39;&#39;&#39;&#39;&#39;l26l0l13l14l19l7l4l17l26l15&#39;&#39;&#39;</span>
</span></span><span style="display:flex;"><span><span style="color:#e6db74">&#39;&#39;&#39;l24l19l7l14l1&#39;&#39;&#39;&#39;&#39;&#39;3l26l7l0l2l10l4l17&#39;&#39;&#39;</span>)<span style="color:#f92672">.</span>split(<span style="color:#e6db74">&#39;l&#39;</span>)))<span style="color:#f92672">+</span><span style="color:#e6db74">&#39;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#39;</span>,)
</span></span></code></pre></div><p>We could certainly do more, but that&rsquo;s where I left this one. Stay tuned for the next JAPH.</p>
]]></content:encoded>
    </item>
    
  </channel>
</rss>
